{
  "version": 3,
  "sources": ["../components/g2_accordion.ts", "../components/g2_checkbox.ts", "../components/g2_collapsible.ts", "../components/g2_color_picker.ts", "../components/g2_combobox.ts", "../components/g2_group.ts", "../components/g2_input_color.ts", "../components/g2_input_float.ts", "../components/g2_input_vector.ts", "../components/g2_panel.ts", "../components/g2_separator.ts", "../components/g2_title.ts", "../components/index.ts"],
  "sourcesContent": ["import { GuiCollapsible } from \"./g2_collapsible\";\r\nexport class GuiAccordion extends HTMLElement{\r\n    template_fragment : DocumentFragment;\r\n    collapsibles : GuiCollapsible[] = [];\r\n    constructor(){\r\n        super();\r\n        this.attachShadow({mode : \"open\"});\r\n        const styles = String.raw`<style>\r\n\r\n        </style>`;\r\n        const template = String.raw`\r\n            ${styles}\r\n            <slot></slot>\r\n        `;\r\n        this.template_fragment = document.createRange().createContextualFragment(template);\r\n        this.shadowRoot?.appendChild(this.template_fragment.cloneNode(true));\r\n\r\n\r\n\r\n        \r\n    }\r\n    open(theone : GuiCollapsible) {\r\n        this.collapsibles.forEach((item, index)=>{\r\n            // console.log(item, index);\r\n            if(item !== theone){\r\n                item.setAttribute(\"closed\", \"true\");\r\n            }\r\n        })\r\n    }\r\n\r\n    connectedCallback(){\r\n        const slot = this.shadowRoot!.querySelector('slot') as HTMLSlotElement;\r\n        \r\n        this.collapsibles = [];\r\n        \r\n        slot?.addEventListener(\"slotchange\", ()=>{\r\n            for(let node of slot?.assignedNodes())\r\n            {\r\n                if(node.nodeName === 'GUI-COLLAPSIBLE'){\r\n\r\n                    let coll = node as GuiCollapsible;\r\n                    coll.addEventListener(\"open\", (ev : Event)=>{\r\n                        this.open(ev.target as GuiCollapsible)\r\n                    })\r\n                    // console.log(coll);\r\n                    \r\n                    this.collapsibles.push(coll);\r\n                }        \r\n            }\r\n        })\r\n    }\r\n\r\n    adoptedCallBack()\r\n    {\r\n        console.log(\"adopted\");   \r\n    }\r\n\r\n    static get observedAttributes(){\r\n        return [];\r\n    }\r\n\r\n\r\n    attributeChangedCallback(name : string, oldValue : any, newValue : any) {\r\n    \r\n    }\r\n}\r\ncustomElements.define(\"gui-accordion\", GuiAccordion);", "export class GuiCheckbox extends HTMLElement{\r\n    template_fragment : DocumentFragment;\r\n\r\n    _label : string = \"toggle\";\r\n    label_el : HTMLLabelElement;\r\n    pretty_el : HTMLDivElement;\r\n    value : boolean = true;\r\n    constructor(){\r\n        super();\r\n        this.attachShadow({mode : \"open\"});\r\n        const styles = String.raw`<style>\r\n            :host{\r\n                --padding-top : 0.3em;\r\n                --padding-bottom : 0.3em;\r\n                --padding-left : 0.5em;\r\n                --padding-right : 0.5em;\r\n            }\r\n            #wrapper{\r\n                display : flex;\r\n                align-items : center;\r\n                justify-content : center;\r\n                /* margin-top : 0.5em;\r\n                margin-bottom : 0.5em; */\r\n                /* padding-left : 0.5em;\r\n                padding-right : 0.5em; */\r\n\r\n                /* padding-top : var(--padding-top); */\r\n                /* padding-bottom : 0.1em; */\r\n            }\r\n            label{\r\n                display : flex;\r\n                flex : 1;\r\n                align-items : center;\r\n                /* justify-content : center; */\r\n                color : white;\r\n                background-color : grey;\r\n                padding-left : var(--padding-left);\r\n                padding-top : var(--padding-top);\r\n                padding-bottom : var(--padding-bottom);\r\n\r\n                border-radius : 3px 0 0 3px;\r\n                line-height : 1em;\r\n                width : 50%;\r\n                cursor : pointer;\r\n            }\r\n            label.checked{\r\n                background-color : green;\r\n            }\r\n            input[type=checkbox]\r\n            {\r\n                visibility : hidden;\r\n                display : none;\r\n            }\r\n            .pretty{\r\n                position : relative;\r\n                flex : 1;\r\n                height : 1em;\r\n                width : 50px;\r\n                background-color : white;\r\n                padding-top : var(--padding-top);\r\n                padding-bottom : var(--padding-bottom);\r\n\r\n                border-radius : 0px 3px 3px 0px;\r\n            }\r\n            .pretty.checked::after{\r\n                content : \"\";\r\n                position : absolute;\r\n                left : calc(50% - 30px/2);\r\n                top : 0;\r\n                width : 30px;\r\n                height : 10px;\r\n                /* background-color : red; */\r\n                border-radius : 0px 3px 3px 0px;\r\n                border : 10px solid #222;\r\n                border-top : none;\r\n                border-right : none;\r\n                transform-origin : 50% 50%;\r\n                transform : scale(0.6) rotate(-45deg) ;\r\n            }\r\n        </style>`;\r\n        const template = String.raw`\r\n            ${styles}\r\n\r\n            <div id=\"wrapper\">\r\n            <label for=\"checkbox\" class=\" ${this.value ? 'checked': ''}\">${this._label}</label>\r\n            <div class=\"pretty ${this.value ? 'checked': ''}\">\r\n            </div>\r\n            <input id=\"checkbox\" type=\"checkbox\" ${this.value ? 'checked': ''} />\r\n            </div>\r\n        `;\r\n        this.template_fragment = document.createRange().createContextualFragment(template);\r\n        this.shadowRoot?.appendChild(this.template_fragment.cloneNode(true));\r\n\r\n        this.label_el = this.shadowRoot!.querySelector(\"label\") as HTMLLabelElement;\r\n        this.pretty_el = this.shadowRoot!.querySelector(\".pretty\") as HTMLDivElement;\r\n\r\n        let checkbox = this.shadowRoot!.querySelector(\"#checkbox\") as HTMLInputElement;\r\n        checkbox.addEventListener(\"change\", (event : Event)=>{\r\n            let checkbox = (event.target as HTMLInputElement);\r\n            // console.log(event);\r\n            this.value = checkbox.toggleAttribute(\"checked\");\r\n            this.pretty_el.classList.toggle(\"checked\");\r\n            this.label_el.classList.toggle(\"checked\");\r\n            let ev = new Event(\"change\");\r\n            this.dispatchEvent(ev);\r\n        })\r\n    }\r\n\r\n\r\n    connectedCallback(){\r\n    }\r\n\r\n\r\n    static get observedAttributes(){\r\n        return [\"label\"];\r\n    }\r\n\r\n\r\n    set label(str : string)\r\n    {\r\n        if(this.label_el)\r\n        {\r\n            this.label_el.innerHTML = `<span>${str}</span>`\r\n        }\r\n    }\r\n    attributeChangedCallback(name : string, oldValue : any, newValue : any) {\r\n        switch(name)\r\n        {\r\n            case 'value':\r\n                this.value = newValue\r\n                break;\r\n            case 'label':\r\n                this.label = newValue\r\n                // this.label_el.innerText = newValue;\r\n                break;\r\n            default : break\r\n        }\r\n    }\r\n}\r\ncustomElements.define(\"gui-checkbox\", GuiCheckbox);", "export class GuiCollapsible extends HTMLElement{\r\n    template_fragment : DocumentFragment;\r\n\r\n    closed : boolean = true;\r\n    _title : string = \"collaspible\";\r\n    header_el : HTMLDivElement;\r\n    arrow_el : HTMLDivElement;\r\n    content_el : HTMLDivElement;\r\n    title_el : HTMLSpanElement;\r\n    constructor(){\r\n        super();\r\n        this.attachShadow({mode : \"open\"});\r\n        const styles = String.raw`\r\n        <style>\r\n\r\n            .header{\r\n                display : flex;\r\n                align-items : center;\r\n                cursor : pointer;\r\n                background-color : #222;\r\n                margin : 0;\r\n                /* outline : 1px solid white; */\r\n                height : 2em;\r\n                margin-top : 0.25em;\r\n                padding-left : 0.5em; \r\n                font-weight : bolder;\r\n            }\r\n\r\n            .header:hover{\r\n                filter: brightness(1.2);\r\n            }\r\n\r\n            .header.closed{\r\n                font-weight : normal;\r\n            }\r\n            .content{\r\n                display : grid;\r\n                grid-template-rows : 1fr;\r\n                gap : 0.5em;\r\n                /* padding : 0.5em; */\r\n                padding : 0.5em;\r\n                /* overflow-y : hidden; */\r\n                /* height : auto; */\r\n                opacity : 1;\r\n                transform-origin : center top;\r\n                /* transform : scale3d(1.0, 1.0, 1.0); */\r\n\r\n                transition: grid-template-rows 0.2s ease-out;\r\n            }\r\n            .content.closed{\r\n                grid-template-rows : 0fr;\r\n                padding-top : 0;\r\n                padding-bottom : 0;\r\n            }\r\n\r\n            .arrow {\r\n                width: 0; \r\n                height: 0; \r\n                border-top: 10px solid transparent;\r\n                border-bottom: 10px solid transparent; \r\n                \r\n                border-left:10px solid white; \r\n                /* padding-right : 10px; */\r\n                transform-origin : 50% 50%;\r\n                margin-right : 20px;\r\n                transform : rotate(90deg);\r\n                transition : all 0.08s; \r\n                opacity : 1.0;\r\n            }\r\n            \r\n            .arrow.closed{\r\n                transform : rotate(0deg);\r\n                opacity : 0.5;\r\n            }\r\n\r\n            .inner {\r\n                overflow: hidden;\r\n                display : flex;\r\n                flex-direction : column;\r\n                gap : 1em;\r\n                /* width : 100%; */\r\n            }\r\n            \r\n        \r\n        </style>`;\r\n\r\n        this.closed = true;\r\n        const template = String.raw`\r\n            \r\n            ${styles}\r\n\r\n            <div class=\"wrapper\">\r\n                <div class=\"header\"><div class=\"arrow\" id=\"arrow\"></div><span id=\"title\">${this.title}</span></div>\r\n                <div class=\"content\">\r\n                    <div class=\"inner\">\r\n                    <slot></slot>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        `;\r\n        this.template_fragment = document.createRange().createContextualFragment(template);\r\n        this.shadowRoot?.appendChild(this.template_fragment.cloneNode(true));\r\n\r\n        this.header_el = this.shadowRoot!.querySelector(\".header\") as HTMLDivElement;\r\n        this.arrow_el = this.shadowRoot!.querySelector(\".header>.arrow\") as HTMLDivElement;\r\n        this.title_el = this.shadowRoot!.querySelector(\"#title\") as HTMLSpanElement;\r\n        \r\n        this.content_el = this.shadowRoot!.querySelector(\".content\") as HTMLDivElement;\r\n\r\n\r\n    }\r\n\r\n\r\n    connectedCallback(){\r\n\r\n        if(this.closed)\r\n        {\r\n            this.header_el.setAttribute(\"closed\", \"true\");\r\n            this.content_el.setAttribute(\"closed\", \"true\");\r\n            this.arrow_el.classList.add(\"closed\");\r\n            this.header_el.classList.add(\"closed\");\r\n            this.content_el.classList.add(\"closed\");\r\n\r\n        }\r\n        this.header_el.addEventListener(\"click\", (event : MouseEvent)=>{\r\n            this.arrow_el.classList.toggle(\"closed\");\r\n            this.header_el.classList.toggle(\"closed\");\r\n            this.content_el.classList.toggle(\"closed\");\r\n\r\n            if(this.header_el.classList.contains(\"closed\"))\r\n            {\r\n                this.closed = true;\r\n            }else{\r\n                this.closed = false;\r\n                let ev = new Event(\"open\");\r\n                this.dispatchEvent(ev);\r\n            }\r\n        });\r\n    }\r\n\r\n    static get observedAttributes()\r\n    {\r\n        return ['title', 'closed'];\r\n    }\r\n\r\n    set title(val : string)\r\n    {\r\n        this._title = val;\r\n        if(this.title_el)\r\n        {\r\n            this.title_el.innerText = val;\r\n        }\r\n    }\r\n    attributeChangedCallback(name : string, oldValue : any, newValue : any) {\r\n        switch(name)\r\n        {\r\n            case 'title' :\r\n                this.title = newValue;\r\n                let span = this.shadowRoot?.querySelector(\".header>span\") as HTMLSpanElement;\r\n                span.innerText = newValue;\r\n                break;\r\n            case 'closed' :\r\n                if(newValue === \"\") this.closed = true;\r\n                else if(newValue === \"true\") this.closed = true;\r\n                else if(newValue === \"false\") this.closed = false;\r\n\r\n                if(this.closed)\r\n                {\r\n                    this.arrow_el.classList.add(\"closed\");\r\n                    this.header_el.classList.add(\"closed\");\r\n                    this.content_el.classList.add(\"closed\");\r\n                }else{\r\n                    this.arrow_el.classList.remove(\"closed\");\r\n                    this.header_el.classList.remove(\"closed\");\r\n                    this.content_el.classList.remove(\"closed\");\r\n                }\r\n                \r\n                break;\r\n            default : break;\r\n        }\r\n\r\n    }\r\n}\r\ncustomElements.define(\"gui-collapsible\", GuiCollapsible);", "export class GuiColorPicker extends HTMLElement{\r\n    template_fragment : DocumentFragment;\r\n    constructor(){\r\n        super();\r\n        this.attachShadow({mode : \"open\"});\r\n        const styles = String.raw`<style>\r\n\r\n            .clr_sample{\r\n                width : 30px;\r\n                height : 100%;\r\n                cursor : pointer;\r\n\r\n                /* overflow : visible; */\r\n                margin : 1px;\r\n            }\r\n\r\n            .clr_sample:hover{\r\n                outline : 1px solid white !important;\r\n            }\r\n        </style>`;\r\n        \r\n        const template = String.raw`\r\n\r\n            ${styles}\r\n            \r\n\r\n                <div class=\"clr_sample\"></div>\r\n\r\n        `;\r\n        this.template_fragment = document.createRange().createContextualFragment(template);\r\n        this.shadowRoot?.appendChild(this.template_fragment.cloneNode(true));\r\n    }\r\n\r\n\r\n    connectedCallback(){\r\n    }\r\n\r\n\r\n    static get observedAttributes(){\r\n        return [];\r\n    }\r\n\r\n\r\n    attributeChangedCallback(name : string, oldValue : any, newValue : any) {\r\n    \r\n    }\r\n}\r\ncustomElements.define(\"gui-color-picker\", GuiColorPicker);", "export class GuiCombobox extends HTMLElement{\r\n    template_fragment : DocumentFragment;\r\n\r\n    _label : string = \"Label\";\r\n    label_el : HTMLLabelElement;\r\n    wrapper : HTMLDivElement;\r\n\r\n    _value : string = \"\";\r\n    _selectedIndex : number = 0;\r\n    constructor(){\r\n        super();\r\n        this.attachShadow({mode : \"open\"});\r\n        const styles = String.raw`<style>\r\n            .wrapper{\r\n                /* padding : 0.5em; */\r\n                display : flex;\r\n                flex-direction : row;\r\n                align-items :center;\r\n                justify-content : center;\r\n                height : 30px;\r\n            }\r\n\r\n            label{\r\n                display : flex;\r\n                align-items : center;\r\n                justify-content : center;\r\n                position : relative;\r\n                outline : 1px solid rgba(255,255,255,0.1);\r\n                height : 100%;\r\n                flex : 1.0;\r\n\r\n                border-radius : 3px 0 0 3px;\r\n            }\r\n\r\n            select{\r\n                border : 0;\r\n                height : 31px;\r\n                line-height : 30px;\r\n                flex : 1;\r\n                position : relative;\r\n                display : block;\r\n                color : #222;\r\n                background-color : white;\r\n                border-radius : 0 3px 3px 0;\r\n            }\r\n        </style>`;\r\n        const template = String.raw`\r\n            ${styles}\r\n\r\n            <div class=\"wrapper\">\r\n            <label for=\"list\">${this._label}</label>\r\n            <slot></slot>\r\n\r\n            </div>\r\n\r\n            \r\n        `;\r\n        this.template_fragment = document.createRange().createContextualFragment(template);\r\n        this.shadowRoot!.appendChild(this.template_fragment.cloneNode(true));\r\n        this.wrapper = this.shadowRoot!.querySelector(\".wrapper\") as HTMLDivElement;\r\n        this.label_el = this.shadowRoot!.querySelector(\"label\") as HTMLLabelElement;\r\n        // let slot = this.shadowRoot!.querySelector(\"slot\");\r\n        // console.log(slot);\r\n        \r\n    }\r\n\r\n    set label(str : string)\r\n    {\r\n        if(this.label_el)\r\n        {\r\n            this._label = str;\r\n            this.label_el.innerText = str;\r\n        }\r\n    }\r\n\r\n    set selectedIndex(index : number)\r\n    {\r\n        this._selectedIndex = index;\r\n    }\r\n\r\n    get selectedIndex() : number\r\n    {\r\n        return this._selectedIndex;\r\n    }\r\n\r\n    get value()\r\n    {\r\n        return this._value;\r\n    }\r\n\r\n    set value(str : string)\r\n    {\r\n        this._value = str;\r\n    }\r\n\r\n    connectedCallback(){\r\n        const slot = this.shadowRoot?.querySelector('slot') as HTMLSlotElement;\r\n        \r\n        \r\n        let option_nodes : Array<HTMLOptionElement> = [];        \r\n        slot?.addEventListener(\"slotchange\", ()=>{\r\n            for(let node of slot?.assignedNodes())\r\n            {\r\n                \r\n                if(node.nodeName === 'OPTION'){\r\n                    \r\n\r\n                    let coll = node as HTMLOptionElement;\r\n\r\n                    option_nodes.push(coll);\r\n\r\n                    this.removeChild(coll);\r\n\r\n                \r\n                }        \r\n            }\r\n            \r\n            let old_select = this.shadowRoot!.querySelector(\".wrapper>select\");\r\n            if(old_select !== null)\r\n            {\r\n                // console.log(\"removing old \" , old_select);\r\n                this.wrapper.removeChild(old_select);\r\n            }\r\n            let select : HTMLSelectElement = document.createElement(\"select\") as HTMLSelectElement;\r\n            select.id = \"list\";\r\n            select.addEventListener(\"change\", (event : any)=>{\r\n                let sel = event.target as HTMLSelectElement;\r\n                // console.log(sel.selectedIndex);\r\n                \r\n                this.value = sel.value; \r\n                this.selectedIndex = sel.selectedIndex;\r\n                let ev= new Event(\"change\", {});\r\n                //  = sel.selectedIndex;\r\n                this.dispatchEvent(ev);\r\n\r\n            })\r\n            for(let option of option_nodes)\r\n            {\r\n                let opt = document.createElement(\"option\");\r\n                opt.innerText = option.value;\r\n                // opt.innerText = option.value;\r\n                select.appendChild(opt)\r\n            }\r\n            this.wrapper.appendChild(select)\r\n        })        \r\n    }\r\n\r\n\r\n    static get observedAttributes(){\r\n        return [\"label\"];\r\n    }\r\n\r\n\r\n    attributeChangedCallback(name : string, oldValue : any, newValue : any) {\r\n        switch(name){\r\n            case 'label':\r\n                if(this.label_el){\r\n                    this.label_el.innerText = newValue;\r\n                }\r\n            default : break;\r\n        }\r\n    }\r\n}\r\ncustomElements.define(\"gui-combobox\", GuiCombobox);", "export class GuiGroup extends HTMLElement{\r\n    template_fragment : DocumentFragment;\r\n\r\n    _label : string = \"\";\r\n    label_el : HTMLDivElement;\r\n    constructor(){\r\n        super();\r\n        this.attachShadow({mode : \"open\"});\r\n        const styles = String.raw`<style>\r\n\r\n            .wrapper{\r\n                position : relative;\r\n                border-radius : 3px;\r\n                outline : 2px solid #ffffff10;\r\n                padding : 0.2em;\r\n                padding-top : 1.0em;\r\n                margin : 2px;\r\n                margin-top : 1.0em;\r\n                display : flex;\r\n                flex-direction : column;\r\n                gap : 0.5em;\r\n            }\r\n            \r\n            .label{\r\n                font-size : 0.8em;\r\n                position : absolute;\r\n\r\n                top : 0;\r\n                line-height : 1em;\r\n                background-color : #222222;\r\n                margin-top : -0.5em;\r\n            }\r\n        </style>`;\r\n        const template = String.raw`\r\n            ${styles}\r\n\r\n\r\n            <div class=\"wrapper\">\r\n            <div class=\"label\">${this._label}</div>\r\n            <slot></slot>\r\n\r\n            </div>\r\n\r\n        `;\r\n        this.template_fragment = document.createRange().createContextualFragment(template);\r\n        this.shadowRoot?.appendChild(this.template_fragment.cloneNode(true));\r\n\r\n        this.label_el = this.shadowRoot!.querySelector(\".label\") as HTMLDivElement;\r\n    }\r\n\r\n\r\n    connectedCallback(){\r\n    }\r\n\r\n\r\n    static get observedAttributes(){\r\n        return ['label'];\r\n    }\r\n\r\n    set label(str : string)\r\n    {\r\n        if(this.label_el)\r\n        {\r\n            this._label = str;\r\n            this.label_el.innerText = str;\r\n        }\r\n    }\r\n\r\n\r\n    attributeChangedCallback(name : string, oldValue : any, newValue : any) {\r\n        switch(name)\r\n        {\r\n            case 'label' : \r\n                this.label = newValue;\r\n                break;\r\n            default : break;\r\n        }\r\n    }\r\n}\r\ncustomElements.define(\"gui-group\", GuiGroup);", "import { GuiInputFloat } from \"./g2_input_float\";\r\nimport { GuiColorPicker } from \"./g2_color_picker\";\r\nexport class GuiInputColor extends HTMLElement{\r\n    template_fragment : DocumentFragment;\r\n\r\n    label_el : HTMLDivElement;\r\n    input_x : GuiInputFloat;\r\n    input_y : GuiInputFloat;\r\n    input_z : GuiInputFloat;\r\n    default_scalar : number = 0;\r\n    _label : string = \"Color\";\r\n    \r\n    private _value : number[] = [0,0,0];\r\n    private _default_value : number[] = [0,0,0];\r\n    \r\n    picker_el : GuiColorPicker;\r\n    constructor()\r\n    {\r\n        super();\r\n        this.attachShadow({mode : \"open\"});\r\n\r\n        const styles = String.raw`\r\n            <style>\r\n\r\n                .wrapper{\r\n                    display : grid;\r\n                    grid-template-columns : var(--label-width) 1fr;\r\n                    font-size : 0.9em;\r\n                }\r\n\r\n                .label{\r\n                    font-family : sans-serif;\r\n                }\r\n            </style>\r\n        `;\r\n\r\n        const template_str = String.raw`\r\n\r\n            ${styles}\r\n            <div class=\"wrapper\">\r\n                <div class=\"label\">${this._label}</div>\r\n                <div class=\"floats\" style=\"display : flex; gap:3px;\">\r\n                    <gui-input-float id=\"input_x\" color=\"red\"   label=\"R\" default_value=\"${this.default_scalar}\" style=\"--label-width : 20px;\"></gui-input-float>\r\n                    <gui-input-float id=\"input_y\" color=\"green\" label=\"G\" default_value=\"${this.default_scalar}\" style=\"--label-width : 20px;\"></gui-input-float>\r\n                    <gui-input-float id=\"input_z\" color=\"blue\"  label=\"B\" default_value=\"${this.default_scalar}\" style=\"--label-width : 20px;\"></gui-input-float>\r\n                    <gui-color-picker></gui-color-picker>\r\n                </div>\r\n            </div>\r\n        `;\r\n\r\n        this.template_fragment = document.createRange().createContextualFragment(template_str);\r\n        this.shadowRoot!.appendChild(this.template_fragment.cloneNode(true));\r\n    \r\n        this.label_el = this.shadowRoot!.querySelector(\".label\") as HTMLDivElement; \r\n        this.input_x = this.shadowRoot!.querySelector(\"#input_x\") as GuiInputFloat;\r\n        this.input_y = this.shadowRoot!.querySelector(\"#input_y\") as GuiInputFloat;\r\n        this.input_z = this.shadowRoot!.querySelector(\"#input_z\") as GuiInputFloat;\r\n\r\n        Promise.all([\r\n            customElements.whenDefined(\"gui-input-float\"),\r\n            customElements.whenDefined(\"gui-color-picker\")\r\n        ]).then(()=>{\r\n            let label_x = this.input_x.shadowRoot!.querySelector(\".wrapper .label span\") as HTMLSpanElement;\r\n            let label_y = this.input_y.shadowRoot!.querySelector(\".wrapper .label span\") as HTMLSpanElement;\r\n            let label_z = this.input_z.shadowRoot!.querySelector(\".wrapper .label span\") as HTMLSpanElement;\r\n            label_x.style.overflow = \"unset\";\r\n            label_y.style.overflow = \"unset\";\r\n            label_z.style.overflow = \"unset\";        \r\n        });\r\n        \r\n        this.picker_el = this.shadowRoot!.querySelector(\"gui-color-picker\") as GuiColorPicker;\r\n\r\n        this.input_x.addEventListener(\"change\", (event : Event)=>{\r\n            let val = (event.target! as GuiInputFloat).value;\r\n            this.value[0] = val;\r\n            this.dispatchEvent(new Event(\"change\"));\r\n            this.updateSample();\r\n        })\r\n        this.input_y.addEventListener(\"change\", (event : Event)=>{\r\n            let val = (event.target! as GuiInputFloat).value;\r\n            this.value[1] = val;\r\n            this.dispatchEvent(new Event(\"change\"));\r\n            this.updateSample();\r\n        })\r\n        this.input_z.addEventListener(\"change\", (event : Event)=>{\r\n            let val = (event.target! as GuiInputFloat).value;\r\n            this.value[2] = val;\r\n            this.dispatchEvent(new Event(\"change\"));\r\n            this.updateSample();\r\n        })\r\n\r\n    }\r\n\r\n    connectedCallback()\r\n    {\r\n        this.input_x._default_value = this.default_scalar;\r\n        this.input_y._default_value = this.default_scalar;\r\n        this.input_z._default_value = this.default_scalar;\r\n\r\n        this.updateSample();\r\n\r\n        \r\n    }\r\n\r\n    updateSample()\r\n    {\r\n        this.clampValues();\r\n        this.picker_el.style.backgroundColor = `rgb(${this.input_x.value * 255},${this.input_y.value * 255},${this.input_z.value * 255})`;\r\n    }\r\n\r\n    clampValues()\r\n    {\r\n        if(this.input_x.value > 1.0) this.input_x.value = 1.0;\r\n        else if(this.input_x.value < 0.0) this.input_x.value = 0.0;\r\n        \r\n        if(this.input_y.value > 1.0) this.input_y.value = 1.0;\r\n        else if(this.input_y.value < 0.0) this.input_y.value = 0.0;\r\n        \r\n        if(this.input_z.value > 1.0) this.input_z.value = 1.0;\r\n        else if(this.input_z.value < 0.0) this.input_z.value = 0.0;\r\n    }\r\n    static get observedAttributes()\r\n    {\r\n        return [\"default_scalar\", \"label\"];\r\n    }\r\n\r\n    attributeChangedCallback(name : string, oldValue : any, newValue : any)\r\n    {\r\n        switch(name)\r\n        {\r\n            case 'default_scalar' :\r\n                this.default_scalar = parseFloat(newValue);\r\n                this.input_x.value = this.default_scalar;\r\n                this.input_y.value = this.default_scalar;\r\n                this.input_z.value = this.default_scalar;\r\n                break;\r\n            case 'label' :\r\n                this.label = newValue;\r\n                this.label_el.innerText = newValue;\r\n                break;\r\n            default : \r\n                break;\r\n        }\r\n    }\r\n\r\n    get value() : number[]{\r\n        return [this.input_x.value, this.input_y.value, this.input_z.value];\r\n    }\r\n\r\n    set value(val : number[])\r\n    {\r\n        console.log(\"setting values : \", val);\r\n        this.input_x.value = val[0];\r\n        this.input_y.value = val[1];\r\n        this.input_z.value = val[2];\r\n        this._value = val;\r\n\r\n        this.updateSample();\r\n    }\r\n\r\n    set default_value(val : number[])\r\n    {\r\n        this._default_value = val;\r\n        this.input_x.default_value = val[0];\r\n        this.input_y.default_value = val[1];\r\n        this.input_z.default_value = val[2];\r\n    }\r\n\r\n    set label(str : string)\r\n    {\r\n        this._label = str;\r\n        this.label_el.innerText = str;\r\n    }\r\n\r\n}\r\n\r\n\r\ncustomElements.define(\"gui-input-color\", GuiInputColor);", "export class GuiInputFloat extends HTMLElement {\r\n\r\n    private _value: number;\r\n    value_preview: number = 0;\r\n    value_offset: number = 0;\r\n    _default_value: number = 0;\r\n\r\n    old_value: number = 0;\r\n    new_value: number = 0;\r\n\r\n    _label: string = \"\";\r\n    label_el: HTMLDivElement;\r\n    _color: string = \"\";\r\n    styles: string;\r\n    value_input: HTMLInputElement;\r\n    number_input: HTMLDivElement;\r\n    template_fragment: DocumentFragment;\r\n\r\n    is_mouse_down: boolean;\r\n    is_dragging: boolean;\r\n\r\n    drag_start_pos: number = 0;\r\n    ctrl_pressed: boolean = false;\r\n    shift_pressed: boolean = false;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({ mode: \"open\" });\r\n        this._value = 0.0;\r\n        this.label = \"X\";\r\n        this.color = \"grey\";\r\n\r\n        this.is_mouse_down = false;\r\n        this.is_dragging = false;\r\n\r\n        this._label = \"wtf ?\";\r\n        this.styles = String.raw`\r\n            <style>\r\n\r\n            :host{\r\n                --padding-top : 0.3em;\r\n                --padding-bottom : 0.3em;\r\n                --padding-left : 0.15em;\r\n                --padding-right : 0.15em;\r\n\r\n                display : flex;\r\n                flex : 1.0;\r\n                box-sizing : border-box;\r\n            }\r\n\r\n            .wrapper{\r\n                position : relative;\r\n                display : grid;\r\n                grid-template-columns : var(--label-width) 1fr;\r\n                align-items: stretch;\r\n                justify-items: stretch;\r\n                width : max-content;\r\n                font-size : 0.9rem;\r\n                flex : 1.0;\r\n            }\r\n\r\n            .label{\r\n                color : white;\r\n                position : relative;\r\n                padding-left : 0.5em;\r\n                padding-right : 0.5em;\r\n                background-color : ${this._color};\r\n                border-radius : 2px 0 0 2px;\r\n                vertical-align : middle;\r\n                padding-top : var(--padding-top);\r\n                padding-bottom : var(--padding-bottom);\r\n                user-select : none;\r\n\r\n                cursor : e-resize;   \r\n\r\n                display : flex;\r\n                align-items : center;\r\n                justify-content : center;\r\n\r\n            }\r\n\r\n            .label span{\r\n                opacity : 0.8;     \r\n                display : block;\r\n                align-items : center;\r\n                justify-content : center;\r\n\r\n                overflow : hidden;\r\n                text-overflow : ellipsis;                           \r\n            }\r\n\r\n            .value_div{\r\n                flex : 1.0;\r\n                \r\n                position : relative;\r\n                /* overflow : hidden; */\r\n                border-radius : 0 2px 2px 0;\r\n                background-color : #eee;\r\n                padding-top : var(--padding-top);\r\n                padding-bottom : var(--padding-bottom);\r\n                /* padding-left : var(--padding-left); */\r\n                width : 100%;\r\n                \r\n            }\r\n\r\n            input{\r\n                display : block;\r\n                color : #222;\r\n                font-weight : bold;\r\n                height : calc(100% - 2px );\r\n                max-width : 9ch;\r\n                border : none;\r\n                height: max-content;\r\n                background-color : transparent;\r\n            }\r\n\r\n            .number_div{\r\n                min-width : 6ch;\r\n            }\r\n\r\n            </style>        \r\n        `;\r\n        const template = String.raw`\r\n\r\n            ${this.styles}\r\n\r\n            <div class=\"wrapper\" oncontextmenu=\"return false;\">\r\n                <div class=\"label\" title=\"${this._label}\"><span>${this._label}</span></div>\r\n                <div class=\"value_div\">\r\n                    <input type=number step=\"0.1\" value=${this.value} />\r\n                    <!-- <div class=\"number_div\" contenteditable> -->\r\n                </div>\r\n            <div>\r\n        `;\r\n\r\n        this.template_fragment = document.createRange().createContextualFragment(template);\r\n        this.shadowRoot?.appendChild(this.template_fragment.cloneNode(true));\r\n\r\n        this.label_el = this.shadowRoot!.querySelector(\".label\") as HTMLDivElement;\r\n        // let label_span = this.label_el.querySelector(\"span\") as HTMLSpanElement;\r\n\r\n\r\n        // label_span.style.opacity = \"0.8\";   \r\n        this.value_input = this.shadowRoot!.querySelector(\"input\") as HTMLInputElement\r\n        this.number_input = this.shadowRoot!.querySelector(\".number_div\") as HTMLDivElement\r\n\r\n        \r\n        this.number_input?.addEventListener(\"input\", (event : Event)=>{\r\n            console.log(event);\r\n            \r\n        })\r\n\r\n    }\r\n\r\n    connectedCallback() {\r\n\r\n        document.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            if (event.ctrlKey) {\r\n                this.ctrl_pressed = true;\r\n            }\r\n            if (event.shiftKey) {\r\n                this.shift_pressed = true;\r\n            }\r\n        })\r\n        document.addEventListener(\"keyup\", (event: KeyboardEvent) => {\r\n\r\n            if (event.key == \"Control\") {\r\n                this.ctrl_pressed = false;\r\n\r\n            }\r\n            if (event.key == \"Shift\") {\r\n                this.shift_pressed = false;\r\n            }\r\n        })\r\n        this.value_input.addEventListener(\"input\", (event: Event) => {\r\n            this._value = parseFloat(this.value_input.value);\r\n\r\n            this.triggerChange();\r\n        })\r\n\r\n        this.value_input.addEventListener(\"keypress\", (event: KeyboardEvent) => {\r\n            if (event.key === \"Enter\") {\r\n                this.value_input.blur();\r\n                this.triggerChange();\r\n            }\r\n        })\r\n\r\n        this.value_input.addEventListener(\"blur\", (event: Event) => {\r\n            this.triggerChange();\r\n        })\r\n\r\n        this.label_el.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n\r\n            this.value_offset = 0;\r\n            if (event.button === 0) {\r\n                this.is_mouse_down = true;\r\n                this.drag_start_pos = event.clientX;\r\n            } else if (event.button === 2) {\r\n                this.value_input.value = this._default_value.toString();\r\n                this.value = this._default_value;\r\n            }\r\n        })\r\n\r\n        document.addEventListener(\"mouseup\", (event: MouseEvent) => {\r\n            this.is_mouse_down = false;\r\n            if (event.button === 0) {\r\n                if (this.value_preview !== 0) {\r\n                    this.value = this.value_preview;\r\n                    this.value_preview = 0;\r\n                }\r\n            }\r\n        })\r\n\r\n        document.addEventListener(\"mousemove\", (event: MouseEvent) => {\r\n\r\n            if (this.is_mouse_down) {\r\n                let diff = (event.pageX - this.drag_start_pos);\r\n                let mult = 0.1;\r\n                if (this.ctrl_pressed) mult *= 0.1;\r\n                else if (this.shift_pressed) mult *= 5.0;\r\n\r\n                diff *= mult;\r\n                this.value_input.value = (this.value + diff).toString();\r\n                this.value_preview = (this.value + diff);\r\n                this.value_offset = diff;\r\n\r\n                this.value += diff;\r\n                this.triggerChange();\r\n\r\n                /** RESET */\r\n                this.drag_start_pos = event.pageX;\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    static get observedAttributes() {\r\n        return ['label', 'color', \"default_value\"];\r\n    }\r\n\r\n    triggerChange() {\r\n        let ev = new Event(\"change\", {\r\n            // bubbles : true,\r\n            // composed : false,\r\n\r\n        });\r\n\r\n        this.dispatchEvent(ev);\r\n    }\r\n    set value(val: number) {\r\n        this._value = val;\r\n        this.value_input.value = val.toString();\r\n        this.triggerChange();\r\n    }\r\n\r\n    get value() {\r\n        return this._value;\r\n    }\r\n\r\n    set default_value(val: number) {\r\n        this._default_value = val;\r\n    }\r\n\r\n    set color(clr: string) {\r\n        this._color = clr;\r\n    }\r\n\r\n    set label(str: string) {\r\n        this._label = str;\r\n        if (this.label_el) {\r\n            this.label_el.innerHTML = `<span>${str}</span>`;\r\n            this.label_el.setAttribute(\"title\", str);\r\n        }\r\n    }\r\n\r\n\r\n    attributeChangedCallback(name: string, oldValue: any, newValue: any) {\r\n        switch (name) {\r\n            case 'color':\r\n                this.label_el.style.backgroundColor = newValue;\r\n\r\n\r\n                break;\r\n            case 'label':\r\n                this.label = newValue;\r\n                break;\r\n            case 'default_value':\r\n                this._default_value = parseFloat(newValue);\r\n                this.value = this._default_value;\r\n\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n}\r\n\r\ncustomElements.define(\"gui-input-float\", GuiInputFloat);", "import { GuiInputFloat } from \"./g2_input_float\";\r\nexport class GuiInputVector extends HTMLElement{\r\n    template_fragment : DocumentFragment;\r\n\r\n    label_el : HTMLDivElement;\r\n    input_x : GuiInputFloat;\r\n    input_y : GuiInputFloat;\r\n    input_z : GuiInputFloat;\r\n    default_scalar : number = 0;\r\n    _label : string = \"Vector\";\r\n    \r\n    private _value : number[] = [0,0,0];\r\n    private _default_value : number[] = [0,0,0];\r\n    constructor()\r\n    {\r\n        super();\r\n        this.attachShadow({mode : \"open\"});\r\n\r\n        const styles = String.raw`\r\n            <style>\r\n\r\n                :host{\r\n                    /* --label-width : 200px;  */\r\n                }\r\n                .wrapper{\r\n                    /* margin-top : 3px; */\r\n                    font-size : 0.9em;\r\n                    display : grid;\r\n                    grid-template-columns : var(--label-width) 1fr;\r\n                    align-items: center;\r\n\r\n                }\r\n\r\n                .label{\r\n                    font-family : sans-serif;\r\n                }\r\n\r\n\r\n                .floats{\r\n                    display : flex; \r\n                    gap:3px;\r\n                }\r\n/* \r\n                .floats ~ .wrapper{\r\n                    flex : 1.0;\r\n                } */\r\n            </style>\r\n        `;\r\n\r\n        const template_str = String.raw`\r\n\r\n            ${styles}\r\n            <div class=\"wrapper\">\r\n                <div class=\"label\">${this._label}</div>\r\n                <div class=\"floats\" style=\"\">\r\n                    <gui-input-float id=\"input_x\" color=\"red\"   label=\"x\" default_value=\"${this.default_scalar}\" style=\"--label-width : 20px;\"> </gui-input-float>\r\n                    <gui-input-float id=\"input_y\" color=\"green\" label=\"y\" default_value=\"${this.default_scalar}\" style=\"--label-width : 20px;\"></gui-input-float>\r\n                    <gui-input-float id=\"input_z\" color=\"blue\"  label=\"z\" default_value=\"${this.default_scalar}\" style=\"--label-width : 20px;\"></gui-input-float>\r\n                </div>\r\n            </div>\r\n        `;\r\n\r\n        this.template_fragment = document.createRange().createContextualFragment(template_str);\r\n        this.shadowRoot!.appendChild(this.template_fragment.cloneNode(true));\r\n    \r\n        this.label_el = this.shadowRoot!.querySelector(\".label\") as HTMLDivElement; \r\n        this.input_x = this.shadowRoot!.querySelector(\"#input_x\") as GuiInputFloat;\r\n        this.input_y = this.shadowRoot!.querySelector(\"#input_y\") as GuiInputFloat;\r\n        this.input_z = this.shadowRoot!.querySelector(\"#input_z\") as GuiInputFloat;\r\n            \r\n        Promise.all([ \r\n            customElements.whenDefined(\"gui-input-float\")\r\n        ]).then(()=>{\r\n            let label_x = this.input_x.shadowRoot!.querySelector(\".wrapper .label span\") as HTMLSpanElement;\r\n            let label_y = this.input_y.shadowRoot!.querySelector(\".wrapper .label span\") as HTMLSpanElement;\r\n            let label_z = this.input_z.shadowRoot!.querySelector(\".wrapper .label span\") as HTMLSpanElement;\r\n            label_x.style.overflow = \"unset\";\r\n            label_y.style.overflow = \"unset\";\r\n            label_z.style.overflow = \"unset\";\r\n        });\r\n        \r\n        this.input_x.addEventListener(\"change\", (event : Event)=>{\r\n            let val = (event.target! as GuiInputFloat).value;\r\n            this.value[0] = val;\r\n            this.dispatchEvent(new Event(\"change\"));\r\n        })\r\n        this.input_y.addEventListener(\"change\", (event : Event)=>{\r\n            let val = (event.target! as GuiInputFloat).value;\r\n            this.value[1] = val;\r\n            this.dispatchEvent(new Event(\"change\"));\r\n        })\r\n        this.input_z.addEventListener(\"change\", (event : Event)=>{\r\n            let val = (event.target! as GuiInputFloat).value;\r\n            this.value[2] = val;\r\n            this.dispatchEvent(new Event(\"change\"));\r\n        })\r\n\r\n    }\r\n\r\n    connectedCallback()\r\n    {\r\n        this.input_x._default_value = this.default_scalar;\r\n        this.input_y._default_value = this.default_scalar;\r\n        this.input_z._default_value = this.default_scalar;\r\n        \r\n    }\r\n\r\n    static get observedAttributes()\r\n    {\r\n        return [\"default_scalar\", \"label\"];\r\n    }\r\n\r\n    attributeChangedCallback(name : string, oldValue : any, newValue : any)\r\n    {\r\n        switch(name)\r\n        {\r\n            case 'default_scalar' :\r\n                this.default_scalar = parseFloat(newValue);\r\n                this.input_x.value = this.default_scalar;\r\n                this.input_y.value = this.default_scalar;\r\n                this.input_z.value = this.default_scalar;\r\n                break;\r\n            case 'label' :\r\n                this.label = newValue;\r\n                this.label_el.innerText = newValue;\r\n                break;\r\n            default : \r\n                break;\r\n        }\r\n    }\r\n\r\n    get value() : number[]{\r\n        return [this.input_x.value, this.input_y.value, this.input_z.value];\r\n    }\r\n\r\n    set value(val : number[])\r\n    {\r\n        console.log(\"setting values : \", val);\r\n        this.input_x.value = val[0];\r\n        this.input_y.value = val[1];\r\n        this.input_z.value = val[2];\r\n        this._value = val;\r\n    }\r\n\r\n    set default_value(val : number[])\r\n    {\r\n        this._default_value = val;\r\n        this.input_x.default_value = val[0];\r\n        this.input_y.default_value = val[1];\r\n        this.input_z.default_value = val[2];\r\n    }\r\n\r\n    set label(str : string)\r\n    {\r\n        this._label = str;\r\n        this.label_el.innerText = str;\r\n    }\r\n\r\n}\r\n\r\n\r\ncustomElements.define(\"gui-input-vector\", GuiInputVector);", "export class GuiPanel extends HTMLElement{\r\n    template_fragment : DocumentFragment;\r\n    constructor()\r\n    {\r\n        super();\r\n        this.attachShadow({mode : \"open\"});\r\n        const styles = String.raw`\r\n            <style>\r\n                .panel{\r\n                    --scrollbar-width : 8px;\r\n                    --scrollbar-track-color : transparent;\r\n                    --scrollbar-thumb-color : gray;\r\n\r\n                    \r\n                }\r\n                \r\n                        /* For WebKit browsers (Chrome, Safari) */\r\n                        ::-webkit-scrollbar {\r\n                            width: var(--scrollbar-width);\r\n                        }\r\n\r\n                        ::-webkit-scrollbar-thumb {\r\n                            background-color: var(--scrollbar-thumb-color);\r\n                            border-radius: 6px;\r\n                        }\r\n\r\n                        ::-webkit-scrollbar-track {\r\n                            background-color: var(--scrollbar-track-color);\r\n                        }\r\n\r\n                        /* For Firefox */\r\n                        * {\r\n                            scrollbar-color: var(--scrollbar-thumb-color) var(--scrollbar-track-color);\r\n                        }\r\n\r\n                        *::-webkit-scrollbar {\r\n                            width: var(--scrollbar-width);\r\n                        }\r\n\r\n                        *::-webkit-scrollbar-thumb {\r\n                            background-color: var(--scrollbar-thumb-color);\r\n                            border-radius: 6px;\r\n                        }\r\n\r\n                        *::-webkit-scrollbar-track {\r\n                            background-color: var(--scrollbar-track-color);\r\n                        }                \r\n                #wrapper{\r\n                    position : fixed;\r\n                    top : 0px;\r\n                    right : 0px;\r\n                    padding : 0.5em;\r\n                    padding-bottom : 0;\r\n                    padding-top : 0;\r\n\r\n                    box-shadow : -2px 2px 8px #0001;\r\n                    border-radius : 0 0 0 3px;\r\n                    height : 100%;\r\n                    max-height : 100%;\r\n                    color : white;\r\n                    background-color : #111;\r\n\r\n                    transition : transform;\r\n                    transition-duration : 0.1s;\r\n\r\n                    cursor: default;\r\n                    user-select : none;\r\n                }\r\n\r\n                #wrapper.hidden{\r\n                    transform : translate3d(100%,0,0 );\r\n                }\r\n\r\n                .panel{\r\n                    position : relative;\r\n                    overflow-y : scroll;\r\n                    height : calc(100% - 50px - 2em);\r\n                    width : 100%;\r\n                    padding-top : 2em;\r\n                }\r\n                .panel:after{\r\n                    content : \" \";\r\n                    position : absolute;\r\n                    width : 100%;\r\n                    height : 30px;\r\n                }\r\n\r\n                .close_btn{\r\n                    position : relative;\r\n                    top : 0;\r\n                    cursor : pointer;\r\n                    height : calc(50px);\r\n                    margin-top : 2px;\r\n                    margin-left : 0px;\r\n                    opacity : 0.5;\r\n                    /* outline : 1px solid white; */\r\n                    width : 100%;\r\n                }\r\n\r\n                .close_btn:hover{\r\n                    opacity : 1.0;\r\n                }\r\n\r\n                .close_btn::before{\r\n                    content : '';\r\n                    position : absolute;\r\n                    top : 0; \r\n                    left : 0;\r\n                    width : 4px;\r\n                    height : 100%;\r\n                    border-radius : 5px;\r\n                    background-color : #eee;\r\n                    transform-origin : 50% 50%;\r\n                    transform :  translateX(20px) rotate(45deg);\r\n                }\r\n                .close_btn::after{\r\n                    content : '';\r\n                    position : absolute;\r\n                    top : 0; \r\n                    left : 0;\r\n                    width : 4px;\r\n                    height : 100%;\r\n                    border-radius : 5px;\r\n                    background-color : #eee;\r\n                    transform-origin : 50% 50%;\r\n                    transform : translateX(20px) rotate(-45deg);\r\n                }\r\n\r\n                .open_btn{\r\n                    display : flex;\r\n                    align-items : center;\r\n                    justify-content : center;\r\n                    font-weight : bold;\r\n                    font-size : 2em;\r\n                    position : absolute;\r\n                    width : 25px;\r\n                    height : 25px;\r\n                    background-color : transparent; \r\n                    opacity : 0.5;\r\n                    filter : drop-shadow(2px 2px 2px pink);\r\n                    top : 0;\r\n                    left : 0;  \r\n                    z-index : 2;\r\n                    margin-left : -25px;\r\n                    visibility : hidden;\r\n                }\r\n                .open_btn:hover{\r\n                    opacity : 0.9;\r\n                }\r\n                #wrapper.hidden>.open_btn{\r\n                    visibility : visible;\r\n                }\r\n            </style>\r\n        `;\r\n        \r\n        const template = String.raw`\r\n            \r\n            ${styles}\r\n            <!-- <div id=\"wrapper\" oncontextmenu=\"return false;\"> -->\r\n            <div id=\"wrapper\" >\r\n                <div class=\"open_btn\">&lt;</div>\r\n                <div class=\"close_btn\"></div>\r\n                <div class=\"panel\">\r\n                    <slot></slot>\r\n                </div>\r\n            </div>\r\n        `;\r\n        this.template_fragment = document.createRange().createContextualFragment(template);\r\n        this.shadowRoot?.appendChild(this.template_fragment.cloneNode(true));\r\n\r\n        let close_btn = this.shadowRoot?.querySelector(\".close_btn\");\r\n        let open_btn = this.shadowRoot?.querySelector(\".open_btn\");\r\n        let wrapper = this.shadowRoot?.querySelector(\"#wrapper\");\r\n        close_btn?.addEventListener(\"click\", (event : Event)=>{\r\n            wrapper!.classList.add(\"hidden\");\r\n        });\r\n        open_btn?.addEventListener(\"click\", (event : Event)=>{\r\n            wrapper!.classList.remove(\"hidden\");\r\n        });\r\n\r\n        document.addEventListener(\"keypress\", (event)=>{\r\n            if(event.key === \"h\")\r\n            {\r\n                wrapper!.classList.toggle(\"hidden\");\r\n            }\r\n        });\r\n   \r\n    }\r\n\r\n\r\n}\r\n\r\ncustomElements.define(\"gui-panel\", GuiPanel);\r\n", "export class GuiSeparator extends HTMLElement{\r\n    template_fragment : DocumentFragment;\r\n    constructor(){\r\n        super();\r\n        this.attachShadow({mode : \"open\"});\r\n        const styles = String.raw`<style>\r\n\r\n            hr{\r\n                opacity : 0.1;\r\n            }\r\n        </style>`;\r\n        const template = String.raw`\r\n            ${styles}\r\n            <hr>\r\n        `;\r\n        this.template_fragment = document.createRange().createContextualFragment(template);\r\n        this.shadowRoot?.appendChild(this.template_fragment.cloneNode(true));\r\n    }\r\n\r\n\r\n    connectedCallback(){\r\n    }\r\n\r\n\r\n    static get observedAttributes(){\r\n        return [];\r\n    }\r\n\r\n\r\n    attributeChangedCallback(name : string, oldValue : any, newValue : any) {\r\n    \r\n    }\r\n}\r\ncustomElements.define(\"gui-separator\", GuiSeparator);", "export class GuiTitle extends HTMLElement {\r\n  title: string = 'Hello, World!';\r\n\r\n  constructor() {\r\n    super();\r\n    this.attachShadow({ mode: 'open' }); \r\n  }\r\n\r\n  connectedCallback() {\r\n    this.render();\r\n  }\r\n\r\n  render() {\r\n    this.shadowRoot!.innerHTML = String.raw`\r\n      <style>\r\n        :host {\r\n          display: block;\r\n        }\r\n\r\n      </style>\r\n      <h2><slot></slot></h2>\r\n    `;\r\n  }\r\n}\r\n  \r\n// Register the custom element\r\ncustomElements.define('gui-title', GuiTitle);", "import { GuiAccordion } from \"./g2_accordion\";\r\nimport { GuiCheckbox } from \"./g2_checkbox\";\r\nimport { GuiCollapsible } from \"./g2_collapsible\";\r\nimport { GuiColorPicker } from \"./g2_color_picker\";\r\nimport { GuiCombobox } from \"./g2_combobox\";\r\nimport { GuiGroup } from \"./g2_group\";\r\nimport { GuiInputColor } from \"./g2_input_color\";\r\nimport { GuiInputFloat } from \"./g2_input_float\";\r\nimport { GuiInputVector } from \"./g2_input_vector\";\r\nimport { GuiPanel } from \"./g2_panel\";\r\nimport { GuiSeparator } from \"./g2_separator\";\r\nimport { GuiTitle } from \"./g2_title\";\r\n\r\nmodule.exports = [ GuiAccordion, GuiCheckbox, GuiCollapsible, GuiColorPicker, GuiCombobox, GuiGroup, GuiInputColor, GuiInputFloat, GuiInputVector, GuiPanel, GuiSeparator, GuiTitle]\r\n"],
  "mappings": "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",
  "names": ["checkbox"]
}
