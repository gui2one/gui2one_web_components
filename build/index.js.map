{
  "version": 3,
  "sources": ["../components/g2_accordion.ts", "../components/g2_checkbox.ts", "../components/g2_collapsible.ts", "../components/g2_color_picker.ts", "../components/g2_combobox.ts", "../components/g2_group.ts", "../components/g2_input_color.ts", "../components/g2_input_float.ts", "../components/g2_input_vector.ts", "../components/g2_panel.ts", "../components/g2_separator.ts", "../components/g2_title.ts", "../components/index.ts"],
  "sourcesContent": ["import { GuiCollapsible } from \"./g2_collapsible\";\r\nexport class GuiAccordion extends HTMLElement{\r\n    template_fragment : DocumentFragment;\r\n    collapsibles : GuiCollapsible[] = [];\r\n    constructor(){\r\n        super();\r\n        this.attachShadow({mode : \"open\"});\r\n        const styles = String.raw`<style>\r\n\r\n        </style>`;\r\n        const template = String.raw`\r\n            ${styles}\r\n            <slot></slot>\r\n        `;\r\n        this.template_fragment = document.createRange().createContextualFragment(template);\r\n        this.shadowRoot?.appendChild(this.template_fragment.cloneNode(true));\r\n\r\n\r\n\r\n        \r\n    }\r\n    open(theone : GuiCollapsible) {\r\n        this.collapsibles.forEach((item, index)=>{\r\n            // console.log(item, index);\r\n            if(item !== theone){\r\n                item.setAttribute(\"closed\", \"true\");\r\n            }\r\n        })\r\n    }\r\n\r\n    connectedCallback(){\r\n        const slot = this.shadowRoot!.querySelector('slot') as HTMLSlotElement;\r\n        \r\n        this.collapsibles = [];\r\n        \r\n        slot?.addEventListener(\"slotchange\", ()=>{\r\n            for(let node of slot?.assignedNodes())\r\n            {\r\n                if(node.nodeName === 'GUI-COLLAPSIBLE'){\r\n\r\n                    let coll = node as GuiCollapsible;\r\n                    coll.addEventListener(\"open\", (ev : Event)=>{\r\n                        this.open(ev.target as GuiCollapsible)\r\n                    })\r\n                    // console.log(coll);\r\n                    \r\n                    this.collapsibles.push(coll);\r\n                }        \r\n            }\r\n        })\r\n    }\r\n\r\n    adoptedCallBack()\r\n    {\r\n        console.log(\"adopted\");   \r\n    }\r\n\r\n    static get observedAttributes(){\r\n        return [];\r\n    }\r\n\r\n\r\n    attributeChangedCallback(name : string, oldValue : any, newValue : any) {\r\n    \r\n    }\r\n}\r\ncustomElements.define(\"gui-accordion\", GuiAccordion);", "export class GuiCheckbox extends HTMLElement{\r\n    template_fragment : DocumentFragment;\r\n\r\n    _label : string = \"toggle\";\r\n    label_el : HTMLLabelElement;\r\n    pretty_el : HTMLDivElement;\r\n    value : boolean = true;\r\n    constructor(){\r\n        super();\r\n        this.attachShadow({mode : \"open\"});\r\n        const styles = String.raw`<style>\r\n            :host{\r\n                --padding-top : 0.3em;\r\n                --padding-bottom : 0.3em;\r\n                --padding-left : 0.5em;\r\n                --padding-right : 0.5em;\r\n            }\r\n            #wrapper{\r\n                display : flex;\r\n                align-items : center;\r\n                justify-content : center;\r\n                /* margin-top : 0.5em;\r\n                margin-bottom : 0.5em; */\r\n                /* padding-left : 0.5em;\r\n                padding-right : 0.5em; */\r\n\r\n                /* padding-top : var(--padding-top); */\r\n                /* padding-bottom : 0.1em; */\r\n            }\r\n            label{\r\n                display : flex;\r\n                flex : 1;\r\n                align-items : center;\r\n                /* justify-content : center; */\r\n                color : white;\r\n                background-color : grey;\r\n                padding-left : var(--padding-left);\r\n                padding-top : var(--padding-top);\r\n                padding-bottom : var(--padding-bottom);\r\n\r\n                border-radius : 3px 0 0 3px;\r\n                line-height : 1em;\r\n                width : 50%;\r\n                cursor : pointer;\r\n            }\r\n            label.checked{\r\n                background-color : green;\r\n            }\r\n            input[type=checkbox]\r\n            {\r\n                visibility : hidden;\r\n                display : none;\r\n            }\r\n            .pretty{\r\n                position : relative;\r\n                flex : 1;\r\n                height : 1em;\r\n                width : 50px;\r\n                background-color : white;\r\n                padding-top : var(--padding-top);\r\n                padding-bottom : var(--padding-bottom);\r\n\r\n                border-radius : 0px 3px 3px 0px;\r\n            }\r\n            .pretty.checked::after{\r\n                content : \"\";\r\n                position : absolute;\r\n                left : calc(50% - 30px/2);\r\n                top : 0;\r\n                width : 30px;\r\n                height : 10px;\r\n                /* background-color : red; */\r\n                border-radius : 0px 3px 3px 0px;\r\n                border : 10px solid #222;\r\n                border-top : none;\r\n                border-right : none;\r\n                transform-origin : 50% 50%;\r\n                transform : scale(0.6) rotate(-45deg) ;\r\n            }\r\n        </style>`;\r\n        const template = String.raw`\r\n            ${styles}\r\n\r\n            <div id=\"wrapper\">\r\n            <label for=\"checkbox\" class=\" ${this.value ? 'checked': ''}\">${this._label}</label>\r\n            <div class=\"pretty ${this.value ? 'checked': ''}\">\r\n            </div>\r\n            <input id=\"checkbox\" type=\"checkbox\" ${this.value ? 'checked': ''} />\r\n            </div>\r\n        `;\r\n        this.template_fragment = document.createRange().createContextualFragment(template);\r\n        this.shadowRoot?.appendChild(this.template_fragment.cloneNode(true));\r\n\r\n        this.label_el = this.shadowRoot!.querySelector(\"label\") as HTMLLabelElement;\r\n        this.pretty_el = this.shadowRoot!.querySelector(\".pretty\") as HTMLDivElement;\r\n\r\n        let checkbox = this.shadowRoot!.querySelector(\"#checkbox\") as HTMLInputElement;\r\n        checkbox.addEventListener(\"change\", (event : Event)=>{\r\n            let checkbox = (event.target as HTMLInputElement);\r\n            // console.log(event);\r\n            this.value = checkbox.toggleAttribute(\"checked\");\r\n            this.pretty_el.classList.toggle(\"checked\");\r\n            this.label_el.classList.toggle(\"checked\");\r\n            let ev = new Event(\"change\");\r\n            this.dispatchEvent(ev);\r\n        })\r\n    }\r\n\r\n\r\n    connectedCallback(){\r\n    }\r\n\r\n\r\n    static get observedAttributes(){\r\n        return [\"label\"];\r\n    }\r\n\r\n\r\n    set label(str : string)\r\n    {\r\n        if(this.label_el)\r\n        {\r\n            this.label_el.innerHTML = `<span>${str}</span>`\r\n        }\r\n    }\r\n    attributeChangedCallback(name : string, oldValue : any, newValue : any) {\r\n        switch(name)\r\n        {\r\n            case 'value':\r\n                this.value = newValue\r\n                break;\r\n            case 'label':\r\n                this.label = newValue\r\n                // this.label_el.innerText = newValue;\r\n                break;\r\n            default : break\r\n        }\r\n    }\r\n}\r\ncustomElements.define(\"gui-checkbox\", GuiCheckbox);", "export class GuiCollapsible extends HTMLElement{\r\n    template_fragment : DocumentFragment;\r\n\r\n    closed : boolean = true;\r\n    _title : string = \"collaspible\";\r\n    header_el : HTMLDivElement;\r\n    arrow_el : HTMLDivElement;\r\n    content_el : HTMLDivElement;\r\n    title_el : HTMLSpanElement;\r\n    constructor(){\r\n        super();\r\n        this.attachShadow({mode : \"open\"});\r\n        const styles = String.raw`\r\n        <style>\r\n\r\n            .header{\r\n                display : flex;\r\n                align-items : center;\r\n                cursor : pointer;\r\n                background-color : #222;\r\n                margin : 0;\r\n                /* outline : 1px solid white; */\r\n                height : 2em;\r\n                margin-top : 0.25em;\r\n                padding-left : 0.5em; \r\n                font-weight : bolder;\r\n            }\r\n\r\n            .header:hover{\r\n                filter: brightness(1.2);\r\n            }\r\n\r\n            .header.closed{\r\n                font-weight : normal;\r\n            }\r\n            .content{\r\n                display : grid;\r\n                grid-template-rows : 1fr;\r\n                gap : 0.5em;\r\n                /* padding : 0.5em; */\r\n                padding : 0.5em;\r\n                /* overflow-y : hidden; */\r\n                /* height : auto; */\r\n                opacity : 1;\r\n                transform-origin : center top;\r\n                /* transform : scale3d(1.0, 1.0, 1.0); */\r\n\r\n                transition: grid-template-rows 0.2s ease-out;\r\n            }\r\n            .content.closed{\r\n                grid-template-rows : 0fr;\r\n                padding-top : 0;\r\n                padding-bottom : 0;\r\n            }\r\n\r\n            .arrow {\r\n                width: 0; \r\n                height: 0; \r\n                border-top: 10px solid transparent;\r\n                border-bottom: 10px solid transparent; \r\n                \r\n                border-left:10px solid white; \r\n                /* padding-right : 10px; */\r\n                transform-origin : 50% 50%;\r\n                margin-right : 20px;\r\n                transform : rotate(90deg);\r\n                transition : all 0.08s; \r\n                opacity : 1.0;\r\n            }\r\n            \r\n            .arrow.closed{\r\n                transform : rotate(0deg);\r\n                opacity : 0.5;\r\n            }\r\n\r\n            .inner {\r\n                overflow: hidden;\r\n                display : flex;\r\n                flex-direction : column;\r\n                gap : 1em;\r\n                /* width : 100%; */\r\n            }\r\n            \r\n        \r\n        </style>`;\r\n\r\n        this.closed = true;\r\n        const template = String.raw`\r\n            \r\n            ${styles}\r\n\r\n            <div class=\"wrapper\">\r\n                <div class=\"header\"><div class=\"arrow\" id=\"arrow\"></div><span id=\"title\">${this.title}</span></div>\r\n                <div class=\"content\">\r\n                    <div class=\"inner\">\r\n                    <slot></slot>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        `;\r\n        this.template_fragment = document.createRange().createContextualFragment(template);\r\n        this.shadowRoot?.appendChild(this.template_fragment.cloneNode(true));\r\n\r\n        this.header_el = this.shadowRoot!.querySelector(\".header\") as HTMLDivElement;\r\n        this.arrow_el = this.shadowRoot!.querySelector(\".header>.arrow\") as HTMLDivElement;\r\n        this.title_el = this.shadowRoot!.querySelector(\"#title\") as HTMLSpanElement;\r\n        \r\n        this.content_el = this.shadowRoot!.querySelector(\".content\") as HTMLDivElement;\r\n\r\n\r\n    }\r\n\r\n\r\n    connectedCallback(){\r\n\r\n        if(this.closed)\r\n        {\r\n            this.header_el.setAttribute(\"closed\", \"true\");\r\n            this.content_el.setAttribute(\"closed\", \"true\");\r\n            this.arrow_el.classList.add(\"closed\");\r\n            this.header_el.classList.add(\"closed\");\r\n            this.content_el.classList.add(\"closed\");\r\n\r\n        }\r\n        this.header_el.addEventListener(\"click\", (event : MouseEvent)=>{\r\n            this.arrow_el.classList.toggle(\"closed\");\r\n            this.header_el.classList.toggle(\"closed\");\r\n            this.content_el.classList.toggle(\"closed\");\r\n\r\n            if(this.header_el.classList.contains(\"closed\"))\r\n            {\r\n                this.closed = true;\r\n            }else{\r\n                this.closed = false;\r\n                let ev = new Event(\"open\");\r\n                this.dispatchEvent(ev);\r\n            }\r\n        });\r\n    }\r\n\r\n    static get observedAttributes()\r\n    {\r\n        return ['title', 'closed'];\r\n    }\r\n\r\n    set title(val : string)\r\n    {\r\n        this._title = val;\r\n        if(this.title_el)\r\n        {\r\n            this.title_el.innerText = val;\r\n        }\r\n    }\r\n    attributeChangedCallback(name : string, oldValue : any, newValue : any) {\r\n        switch(name)\r\n        {\r\n            case 'title' :\r\n                this.title = newValue;\r\n                let span = this.shadowRoot?.querySelector(\".header>span\") as HTMLSpanElement;\r\n                span.innerText = newValue;\r\n                break;\r\n            case 'closed' :\r\n                if(newValue === \"\") this.closed = true;\r\n                else if(newValue === \"true\") this.closed = true;\r\n                else if(newValue === \"false\") this.closed = false;\r\n\r\n                if(this.closed)\r\n                {\r\n                    this.arrow_el.classList.add(\"closed\");\r\n                    this.header_el.classList.add(\"closed\");\r\n                    this.content_el.classList.add(\"closed\");\r\n                }else{\r\n                    this.arrow_el.classList.remove(\"closed\");\r\n                    this.header_el.classList.remove(\"closed\");\r\n                    this.content_el.classList.remove(\"closed\");\r\n                }\r\n                \r\n                break;\r\n            default : break;\r\n        }\r\n\r\n    }\r\n}\r\ncustomElements.define(\"gui-collapsible\", GuiCollapsible);", "export class GuiColorPicker extends HTMLElement{\r\n    template_fragment : DocumentFragment;\r\n    constructor(){\r\n        super();\r\n        this.attachShadow({mode : \"open\"});\r\n        const styles = String.raw`<style>\r\n\r\n            .clr_sample{\r\n                width : 30px;\r\n                height : 100%;\r\n                cursor : pointer;\r\n\r\n                /* overflow : visible; */\r\n                margin : 1px;\r\n            }\r\n\r\n            .clr_sample:hover{\r\n                outline : 1px solid white !important;\r\n            }\r\n        </style>`;\r\n        \r\n        const template = String.raw`\r\n\r\n            ${styles}\r\n            \r\n\r\n                <div class=\"clr_sample\"></div>\r\n\r\n        `;\r\n        this.template_fragment = document.createRange().createContextualFragment(template);\r\n        this.shadowRoot?.appendChild(this.template_fragment.cloneNode(true));\r\n    }\r\n\r\n\r\n    connectedCallback(){\r\n    }\r\n\r\n\r\n    static get observedAttributes(){\r\n        return [];\r\n    }\r\n\r\n\r\n    attributeChangedCallback(name : string, oldValue : any, newValue : any) {\r\n    \r\n    }\r\n}\r\ncustomElements.define(\"gui-color-picker\", GuiColorPicker);", "export class GuiCombobox extends HTMLElement{\r\n    template_fragment : DocumentFragment;\r\n\r\n    _label : string = \"Label\";\r\n    label_el : HTMLLabelElement;\r\n    wrapper : HTMLDivElement;\r\n\r\n    _value : string = \"\";\r\n    _selectedIndex : number = 0;\r\n    constructor(){\r\n        super();\r\n        this.attachShadow({mode : \"open\"});\r\n        const styles = String.raw`<style>\r\n            .wrapper{\r\n                /* padding : 0.5em; */\r\n                display : flex;\r\n                flex-direction : row;\r\n                align-items :center;\r\n                justify-content : center;\r\n                height : 30px;\r\n            }\r\n\r\n            label{\r\n                display : flex;\r\n                align-items : center;\r\n                justify-content : center;\r\n                position : relative;\r\n                outline : 1px solid rgba(255,255,255,0.1);\r\n                height : 100%;\r\n                flex : 1.0;\r\n\r\n                border-radius : 3px 0 0 3px;\r\n            }\r\n\r\n            select{\r\n                border : 0;\r\n                height : 31px;\r\n                line-height : 30px;\r\n                flex : 1;\r\n                position : relative;\r\n                display : block;\r\n                color : #222;\r\n                background-color : white;\r\n                border-radius : 0 3px 3px 0;\r\n            }\r\n        </style>`;\r\n        const template = String.raw`\r\n            ${styles}\r\n\r\n            <div class=\"wrapper\">\r\n            <label for=\"list\">${this._label}</label>\r\n            <slot></slot>\r\n\r\n            </div>\r\n\r\n            \r\n        `;\r\n        this.template_fragment = document.createRange().createContextualFragment(template);\r\n        this.shadowRoot!.appendChild(this.template_fragment.cloneNode(true));\r\n        this.wrapper = this.shadowRoot!.querySelector(\".wrapper\") as HTMLDivElement;\r\n        this.label_el = this.shadowRoot!.querySelector(\"label\") as HTMLLabelElement;\r\n        // let slot = this.shadowRoot!.querySelector(\"slot\");\r\n        // console.log(slot);\r\n        \r\n    }\r\n\r\n    set label(str : string)\r\n    {\r\n        if(this.label_el)\r\n        {\r\n            this._label = str;\r\n            this.label_el.innerText = str;\r\n        }\r\n    }\r\n\r\n    set selectedIndex(index : number)\r\n    {\r\n        this._selectedIndex = index;\r\n    }\r\n\r\n    get selectedIndex() : number\r\n    {\r\n        return this._selectedIndex;\r\n    }\r\n\r\n    get value()\r\n    {\r\n        return this._value;\r\n    }\r\n\r\n    set value(str : string)\r\n    {\r\n        this._value = str;\r\n    }\r\n\r\n    connectedCallback(){\r\n        const slot = this.shadowRoot?.querySelector('slot') as HTMLSlotElement;\r\n        \r\n        \r\n        let option_nodes : Array<HTMLOptionElement> = [];        \r\n        slot?.addEventListener(\"slotchange\", ()=>{\r\n            for(let node of slot?.assignedNodes())\r\n            {\r\n                \r\n                if(node.nodeName === 'OPTION'){\r\n                    \r\n\r\n                    let coll = node as HTMLOptionElement;\r\n\r\n                    option_nodes.push(coll);\r\n\r\n                    this.removeChild(coll);\r\n\r\n                \r\n                }        \r\n            }\r\n            \r\n            let old_select = this.shadowRoot!.querySelector(\".wrapper>select\");\r\n            if(old_select !== null)\r\n            {\r\n                // console.log(\"removing old \" , old_select);\r\n                this.wrapper.removeChild(old_select);\r\n            }\r\n            let select : HTMLSelectElement = document.createElement(\"select\") as HTMLSelectElement;\r\n            select.id = \"list\";\r\n            select.addEventListener(\"change\", (event : any)=>{\r\n                let sel = event.target as HTMLSelectElement;\r\n                // console.log(sel.selectedIndex);\r\n                \r\n                this.value = sel.value; \r\n                this.selectedIndex = sel.selectedIndex;\r\n                let ev= new Event(\"change\", {});\r\n                //  = sel.selectedIndex;\r\n                this.dispatchEvent(ev);\r\n\r\n            })\r\n            for(let option of option_nodes)\r\n            {\r\n                let opt = document.createElement(\"option\");\r\n                opt.innerText = option.value;\r\n                // opt.innerText = option.value;\r\n                select.appendChild(opt)\r\n            }\r\n            this.wrapper.appendChild(select)\r\n        })        \r\n    }\r\n\r\n\r\n    static get observedAttributes(){\r\n        return [\"label\"];\r\n    }\r\n\r\n\r\n    attributeChangedCallback(name : string, oldValue : any, newValue : any) {\r\n        switch(name){\r\n            case 'label':\r\n                if(this.label_el){\r\n                    this.label_el.innerText = newValue;\r\n                }\r\n            default : break;\r\n        }\r\n    }\r\n}\r\ncustomElements.define(\"gui-combobox\", GuiCombobox);", "export class GuiGroup extends HTMLElement{\r\n    template_fragment : DocumentFragment;\r\n\r\n    _label : string = \"\";\r\n    label_el : HTMLDivElement;\r\n    constructor(){\r\n        super();\r\n        this.attachShadow({mode : \"open\"});\r\n        const styles = String.raw`<style>\r\n\r\n            .wrapper{\r\n                position : relative;\r\n                border-radius : 3px;\r\n                outline : 2px solid #ffffff10;\r\n                padding : 0.2em;\r\n                padding-top : 1.0em;\r\n                margin : 2px;\r\n                margin-top : 1.0em;\r\n                display : flex;\r\n                flex-direction : column;\r\n                gap : 0.5em;\r\n            }\r\n            \r\n            .label{\r\n                font-size : 0.8em;\r\n                position : absolute;\r\n\r\n                top : 0;\r\n                line-height : 1em;\r\n                background-color : #222222;\r\n                margin-top : -0.5em;\r\n            }\r\n        </style>`;\r\n        const template = String.raw`\r\n            ${styles}\r\n\r\n\r\n            <div class=\"wrapper\">\r\n            <div class=\"label\">${this._label}</div>\r\n            <slot></slot>\r\n\r\n            </div>\r\n\r\n        `;\r\n        this.template_fragment = document.createRange().createContextualFragment(template);\r\n        this.shadowRoot?.appendChild(this.template_fragment.cloneNode(true));\r\n\r\n        this.label_el = this.shadowRoot!.querySelector(\".label\") as HTMLDivElement;\r\n    }\r\n\r\n\r\n    connectedCallback(){\r\n    }\r\n\r\n\r\n    static get observedAttributes(){\r\n        return ['label'];\r\n    }\r\n\r\n    set label(str : string)\r\n    {\r\n        if(this.label_el)\r\n        {\r\n            this._label = str;\r\n            this.label_el.innerText = str;\r\n        }\r\n    }\r\n\r\n\r\n    attributeChangedCallback(name : string, oldValue : any, newValue : any) {\r\n        switch(name)\r\n        {\r\n            case 'label' : \r\n                this.label = newValue;\r\n                break;\r\n            default : break;\r\n        }\r\n    }\r\n}\r\ncustomElements.define(\"gui-group\", GuiGroup);", "import { GuiInputFloat } from \"./g2_input_float\";\r\nimport { GuiColorPicker } from \"./g2_color_picker\";\r\nexport class GuiInputColor extends HTMLElement{\r\n    template_fragment : DocumentFragment;\r\n\r\n    label_el : HTMLDivElement;\r\n    input_x : GuiInputFloat;\r\n    input_y : GuiInputFloat;\r\n    input_z : GuiInputFloat;\r\n    default_scalar : number = 0;\r\n    _label : string = \"Color\";\r\n    \r\n    private _value : number[] = [0,0,0];\r\n    private _default_value : number[] = [0,0,0];\r\n    \r\n    picker_el : GuiColorPicker;\r\n    constructor()\r\n    {\r\n        super();\r\n        this.attachShadow({mode : \"open\"});\r\n\r\n        const styles = String.raw`\r\n            <style>\r\n\r\n                .wrapper{\r\n                    display : grid;\r\n                    grid-template-columns : var(--label-width) 1fr;\r\n                    font-size : 0.9em;\r\n                }\r\n\r\n                .label{\r\n                    font-family : sans-serif;\r\n                }\r\n            </style>\r\n        `;\r\n\r\n        const template_str = String.raw`\r\n\r\n            ${styles}\r\n            <div class=\"wrapper\">\r\n                <div class=\"label\">${this._label}</div>\r\n                <div class=\"floats\" style=\"display : flex; gap:3px;\">\r\n                    <gui-input-float id=\"input_x\" color=\"red\"   label=\"R\" default_value=\"${this.default_scalar}\" style=\"--label-width : 20px;\"></gui-input-float>\r\n                    <gui-input-float id=\"input_y\" color=\"green\" label=\"G\" default_value=\"${this.default_scalar}\" style=\"--label-width : 20px;\"></gui-input-float>\r\n                    <gui-input-float id=\"input_z\" color=\"blue\"  label=\"B\" default_value=\"${this.default_scalar}\" style=\"--label-width : 20px;\"></gui-input-float>\r\n                    <gui-color-picker></gui-color-picker>\r\n                </div>\r\n            </div>\r\n        `;\r\n\r\n        this.template_fragment = document.createRange().createContextualFragment(template_str);\r\n        this.shadowRoot!.appendChild(this.template_fragment.cloneNode(true));\r\n    \r\n        this.label_el = this.shadowRoot!.querySelector(\".label\") as HTMLDivElement; \r\n        this.input_x = this.shadowRoot!.querySelector(\"#input_x\") as GuiInputFloat;\r\n        this.input_y = this.shadowRoot!.querySelector(\"#input_y\") as GuiInputFloat;\r\n        this.input_z = this.shadowRoot!.querySelector(\"#input_z\") as GuiInputFloat;\r\n\r\n        Promise.all([\r\n            customElements.whenDefined(\"gui-input-float\"),\r\n            customElements.whenDefined(\"gui-color-picker\")\r\n        ]).then(()=>{\r\n            let label_x = this.input_x.shadowRoot!.querySelector(\".wrapper .label span\") as HTMLSpanElement;\r\n            let label_y = this.input_y.shadowRoot!.querySelector(\".wrapper .label span\") as HTMLSpanElement;\r\n            let label_z = this.input_z.shadowRoot!.querySelector(\".wrapper .label span\") as HTMLSpanElement;\r\n            label_x.style.overflow = \"unset\";\r\n            label_y.style.overflow = \"unset\";\r\n            label_z.style.overflow = \"unset\";        \r\n        });\r\n        \r\n        this.picker_el = this.shadowRoot!.querySelector(\"gui-color-picker\") as GuiColorPicker;\r\n\r\n        this.input_x.addEventListener(\"change\", (event : Event)=>{\r\n            let val = (event.target! as GuiInputFloat).value;\r\n            this.value[0] = val;\r\n            this.dispatchEvent(new Event(\"change\"));\r\n            this.updateSample();\r\n        })\r\n        this.input_y.addEventListener(\"change\", (event : Event)=>{\r\n            let val = (event.target! as GuiInputFloat).value;\r\n            this.value[1] = val;\r\n            this.dispatchEvent(new Event(\"change\"));\r\n            this.updateSample();\r\n        })\r\n        this.input_z.addEventListener(\"change\", (event : Event)=>{\r\n            let val = (event.target! as GuiInputFloat).value;\r\n            this.value[2] = val;\r\n            this.dispatchEvent(new Event(\"change\"));\r\n            this.updateSample();\r\n        })\r\n\r\n    }\r\n\r\n    connectedCallback()\r\n    {\r\n        this.input_x._default_value = this.default_scalar;\r\n        this.input_y._default_value = this.default_scalar;\r\n        this.input_z._default_value = this.default_scalar;\r\n\r\n        this.updateSample();\r\n\r\n        \r\n    }\r\n\r\n    updateSample()\r\n    {\r\n        this.clampValues();\r\n        this.picker_el.style.backgroundColor = `rgb(${this.input_x.value * 255},${this.input_y.value * 255},${this.input_z.value * 255})`;\r\n    }\r\n\r\n    clampValues()\r\n    {\r\n        if(this.input_x.value > 1.0) this.input_x.value = 1.0;\r\n        else if(this.input_x.value < 0.0) this.input_x.value = 0.0;\r\n        \r\n        if(this.input_y.value > 1.0) this.input_y.value = 1.0;\r\n        else if(this.input_y.value < 0.0) this.input_y.value = 0.0;\r\n        \r\n        if(this.input_z.value > 1.0) this.input_z.value = 1.0;\r\n        else if(this.input_z.value < 0.0) this.input_z.value = 0.0;\r\n    }\r\n    static get observedAttributes()\r\n    {\r\n        return [\"default_scalar\", \"label\"];\r\n    }\r\n\r\n    attributeChangedCallback(name : string, oldValue : any, newValue : any)\r\n    {\r\n        switch(name)\r\n        {\r\n            case 'default_scalar' :\r\n                this.default_scalar = parseFloat(newValue);\r\n                this.input_x.value = this.default_scalar;\r\n                this.input_y.value = this.default_scalar;\r\n                this.input_z.value = this.default_scalar;\r\n                break;\r\n            case 'label' :\r\n                this.label = newValue;\r\n                this.label_el.innerText = newValue;\r\n                break;\r\n            default : \r\n                break;\r\n        }\r\n    }\r\n\r\n    get value() : number[]{\r\n        return [this.input_x.value, this.input_y.value, this.input_z.value];\r\n    }\r\n\r\n    set value(val : number[])\r\n    {\r\n        console.log(\"setting values : \", val);\r\n        this.input_x.value = val[0];\r\n        this.input_y.value = val[1];\r\n        this.input_z.value = val[2];\r\n        this._value = val;\r\n\r\n        this.updateSample();\r\n    }\r\n\r\n    set default_value(val : number[])\r\n    {\r\n        this._default_value = val;\r\n        this.input_x.default_value = val[0];\r\n        this.input_y.default_value = val[1];\r\n        this.input_z.default_value = val[2];\r\n    }\r\n\r\n    set label(str : string)\r\n    {\r\n        this._label = str;\r\n        this.label_el.innerText = str;\r\n    }\r\n\r\n}\r\n\r\n\r\ncustomElements.define(\"gui-input-color\", GuiInputColor);", "export class GuiInputFloat extends HTMLElement {\r\n\r\n    private _value: number;\r\n    value_preview: number = 0;\r\n    value_offset: number = 0;\r\n    _default_value: number = 0;\r\n\r\n    old_value: number = 0;\r\n    new_value: number = 0;\r\n\r\n    _label: string = \"\";\r\n    label_el: HTMLDivElement;\r\n    _color: string = \"\";\r\n    styles: string;\r\n    value_input: HTMLInputElement;\r\n    number_input: HTMLDivElement;\r\n    template_fragment: DocumentFragment;\r\n\r\n    is_mouse_down: boolean;\r\n    is_dragging: boolean;\r\n\r\n    drag_start_pos: number = 0;\r\n    ctrl_pressed: boolean = false;\r\n    shift_pressed: boolean = false;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({ mode: \"open\" });\r\n        this._value = 0.0;\r\n        this.label = \"X\";\r\n        this.color = \"grey\";\r\n\r\n        this.is_mouse_down = false;\r\n        this.is_dragging = false;\r\n\r\n        this._label = \"wtf ?\";\r\n        this.styles = String.raw`\r\n            <style>\r\n\r\n            :host{\r\n                --padding-top : 0.3em;\r\n                --padding-bottom : 0.3em;\r\n                --padding-left : 0.15em;\r\n                --padding-right : 0.15em;\r\n\r\n                display : flex;\r\n                flex : 1.0;\r\n                box-sizing : border-box;\r\n            }\r\n\r\n            .wrapper{\r\n                position : relative;\r\n                display : grid;\r\n                grid-template-columns : var(--label-width) 1fr;\r\n                align-items: stretch;\r\n                justify-items: stretch;\r\n                width : max-content;\r\n                font-size : 0.9rem;\r\n                flex : 1.0;\r\n            }\r\n\r\n            .label{\r\n                color : white;\r\n                position : relative;\r\n                padding-left : 0.5em;\r\n                padding-right : 0.5em;\r\n                background-color : ${this._color};\r\n                border-radius : 2px 0 0 2px;\r\n                vertical-align : middle;\r\n                padding-top : var(--padding-top);\r\n                padding-bottom : var(--padding-bottom);\r\n                user-select : none;\r\n\r\n                cursor : e-resize;   \r\n\r\n                display : flex;\r\n                align-items : center;\r\n                justify-content : center;\r\n\r\n            }\r\n\r\n            .label span{\r\n                opacity : 0.8;     \r\n                display : block;\r\n                align-items : center;\r\n                justify-content : center;\r\n\r\n                overflow : hidden;\r\n                text-overflow : ellipsis;                           \r\n            }\r\n\r\n            .value_div{\r\n                flex : 1.0;\r\n                \r\n                position : relative;\r\n                /* overflow : hidden; */\r\n                border-radius : 0 2px 2px 0;\r\n                background-color : #eee;\r\n                padding-top : var(--padding-top);\r\n                padding-bottom : var(--padding-bottom);\r\n                /* padding-left : var(--padding-left); */\r\n                width : 100%;\r\n                \r\n            }\r\n\r\n            input{\r\n                display : block;\r\n                color : #222;\r\n                font-weight : bold;\r\n                height : calc(100% - 2px );\r\n                max-width : 9ch;\r\n                border : none;\r\n                height: max-content;\r\n                background-color : transparent;\r\n            }\r\n\r\n            .number_div{\r\n                min-width : 6ch;\r\n            }\r\n\r\n            </style>        \r\n        `;\r\n        const template = String.raw`\r\n\r\n            ${this.styles}\r\n\r\n            <div class=\"wrapper\" oncontextmenu=\"return false;\">\r\n                <div class=\"label\" title=\"${this._label}\"><span>${this._label}</span></div>\r\n                <div class=\"value_div\">\r\n                    <input type=number step=\"0.1\" value=${this.value} />\r\n                    <!-- <div class=\"number_div\" contenteditable> -->\r\n                </div>\r\n            <div>\r\n        `;\r\n\r\n        this.template_fragment = document.createRange().createContextualFragment(template);\r\n        this.shadowRoot?.appendChild(this.template_fragment.cloneNode(true));\r\n\r\n        this.label_el = this.shadowRoot!.querySelector(\".label\") as HTMLDivElement;\r\n        // let label_span = this.label_el.querySelector(\"span\") as HTMLSpanElement;\r\n\r\n\r\n        // label_span.style.opacity = \"0.8\";   \r\n        this.value_input = this.shadowRoot!.querySelector(\"input\") as HTMLInputElement\r\n        this.number_input = this.shadowRoot!.querySelector(\".number_div\") as HTMLDivElement\r\n\r\n        \r\n        this.number_input?.addEventListener(\"input\", (event : Event)=>{\r\n            console.log(event);\r\n            \r\n        })\r\n\r\n    }\r\n\r\n    connectedCallback() {\r\n\r\n        document.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            if (event.ctrlKey) {\r\n                this.ctrl_pressed = true;\r\n            }\r\n            if (event.shiftKey) {\r\n                this.shift_pressed = true;\r\n            }\r\n        })\r\n        document.addEventListener(\"keyup\", (event: KeyboardEvent) => {\r\n\r\n            if (event.key == \"Control\") {\r\n                this.ctrl_pressed = false;\r\n\r\n            }\r\n            if (event.key == \"Shift\") {\r\n                this.shift_pressed = false;\r\n            }\r\n        })\r\n        this.value_input.addEventListener(\"input\", (event: Event) => {\r\n            this._value = parseFloat(this.value_input.value);\r\n\r\n            this.triggerChange();\r\n        })\r\n\r\n        this.value_input.addEventListener(\"keypress\", (event: KeyboardEvent) => {\r\n            if (event.key === \"Enter\") {\r\n                this.value_input.blur();\r\n                this.triggerChange();\r\n            }\r\n        })\r\n\r\n        this.value_input.addEventListener(\"blur\", (event: Event) => {\r\n            this.triggerChange();\r\n        })\r\n\r\n        this.label_el.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n\r\n            this.value_offset = 0;\r\n            if (event.button === 0) {\r\n                this.is_mouse_down = true;\r\n                this.drag_start_pos = event.clientX;\r\n            } else if (event.button === 2) {\r\n                this.value_input.value = this._default_value.toString();\r\n                this.value = this._default_value;\r\n            }\r\n        })\r\n\r\n        document.addEventListener(\"mouseup\", (event: MouseEvent) => {\r\n            this.is_mouse_down = false;\r\n            if (event.button === 0) {\r\n                if (this.value_preview !== 0) {\r\n                    this.value = this.value_preview;\r\n                    this.value_preview = 0;\r\n                }\r\n            }\r\n        })\r\n\r\n        document.addEventListener(\"mousemove\", (event: MouseEvent) => {\r\n\r\n            if (this.is_mouse_down) {\r\n                let diff = (event.pageX - this.drag_start_pos);\r\n                let mult = 0.1;\r\n                if (this.ctrl_pressed) mult *= 0.1;\r\n                else if (this.shift_pressed) mult *= 5.0;\r\n\r\n                diff *= mult;\r\n                this.value_input.value = (this.value + diff).toString();\r\n                this.value_preview = (this.value + diff);\r\n                this.value_offset = diff;\r\n\r\n                this.value += diff;\r\n                this.triggerChange();\r\n\r\n                /** RESET */\r\n                this.drag_start_pos = event.pageX;\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    static get observedAttributes() {\r\n        return ['label', 'color', \"default_value\"];\r\n    }\r\n\r\n    triggerChange() {\r\n        let ev = new Event(\"change\", {\r\n            // bubbles : true,\r\n            // composed : false,\r\n\r\n        });\r\n\r\n        this.dispatchEvent(ev);\r\n    }\r\n    set value(val: number) {\r\n        this._value = val;\r\n        this.value_input.value = val.toString();\r\n        this.triggerChange();\r\n    }\r\n\r\n    get value() {\r\n        return this._value;\r\n    }\r\n\r\n    set default_value(val: number) {\r\n        this._default_value = val;\r\n    }\r\n\r\n    set color(clr: string) {\r\n        this._color = clr;\r\n    }\r\n\r\n    set label(str: string) {\r\n        this._label = str;\r\n        if (this.label_el) {\r\n            this.label_el.innerHTML = `<span>${str}</span>`;\r\n            this.label_el.setAttribute(\"title\", str);\r\n        }\r\n    }\r\n\r\n\r\n    attributeChangedCallback(name: string, oldValue: any, newValue: any) {\r\n        switch (name) {\r\n            case 'color':\r\n                this.label_el.style.backgroundColor = newValue;\r\n\r\n\r\n                break;\r\n            case 'label':\r\n                this.label = newValue;\r\n                break;\r\n            case 'default_value':\r\n                this._default_value = parseFloat(newValue);\r\n                this.value = this._default_value;\r\n\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n}\r\n\r\ncustomElements.define(\"gui-input-float\", GuiInputFloat);", "import { GuiInputFloat } from \"./g2_input_float\";\r\nexport class GuiInputVector extends HTMLElement{\r\n    template_fragment : DocumentFragment;\r\n\r\n    label_el : HTMLDivElement;\r\n    input_x : GuiInputFloat;\r\n    input_y : GuiInputFloat;\r\n    input_z : GuiInputFloat;\r\n    default_scalar : number = 0;\r\n    _label : string = \"Vector\";\r\n    \r\n    private _value : number[] = [0,0,0];\r\n    private _default_value : number[] = [0,0,0];\r\n    constructor()\r\n    {\r\n        super();\r\n        this.attachShadow({mode : \"open\"});\r\n\r\n        const styles = String.raw`\r\n            <style>\r\n\r\n                :host{\r\n                    /* --label-width : 200px;  */\r\n                }\r\n                .wrapper{\r\n                    /* margin-top : 3px; */\r\n                    font-size : 0.9em;\r\n                    display : grid;\r\n                    grid-template-columns : var(--label-width) 1fr;\r\n                    align-items: center;\r\n\r\n                }\r\n\r\n                .label{\r\n                    font-family : sans-serif;\r\n                }\r\n\r\n\r\n                .floats{\r\n                    display : flex; \r\n                    gap:3px;\r\n                }\r\n/* \r\n                .floats ~ .wrapper{\r\n                    flex : 1.0;\r\n                } */\r\n            </style>\r\n        `;\r\n\r\n        const template_str = String.raw`\r\n\r\n            ${styles}\r\n            <div class=\"wrapper\">\r\n                <div class=\"label\">${this._label}</div>\r\n                <div class=\"floats\" style=\"\">\r\n                    <gui-input-float id=\"input_x\" color=\"red\"   label=\"x\" default_value=\"${this.default_scalar}\" style=\"--label-width : 20px;\"> </gui-input-float>\r\n                    <gui-input-float id=\"input_y\" color=\"green\" label=\"y\" default_value=\"${this.default_scalar}\" style=\"--label-width : 20px;\"></gui-input-float>\r\n                    <gui-input-float id=\"input_z\" color=\"blue\"  label=\"z\" default_value=\"${this.default_scalar}\" style=\"--label-width : 20px;\"></gui-input-float>\r\n                </div>\r\n            </div>\r\n        `;\r\n\r\n        this.template_fragment = document.createRange().createContextualFragment(template_str);\r\n        this.shadowRoot!.appendChild(this.template_fragment.cloneNode(true));\r\n    \r\n        this.label_el = this.shadowRoot!.querySelector(\".label\") as HTMLDivElement; \r\n        this.input_x = this.shadowRoot!.querySelector(\"#input_x\") as GuiInputFloat;\r\n        this.input_y = this.shadowRoot!.querySelector(\"#input_y\") as GuiInputFloat;\r\n        this.input_z = this.shadowRoot!.querySelector(\"#input_z\") as GuiInputFloat;\r\n            \r\n        Promise.all([ \r\n            customElements.whenDefined(\"gui-input-float\")\r\n        ]).then(()=>{\r\n            let label_x = this.input_x.shadowRoot!.querySelector(\".wrapper .label span\") as HTMLSpanElement;\r\n            let label_y = this.input_y.shadowRoot!.querySelector(\".wrapper .label span\") as HTMLSpanElement;\r\n            let label_z = this.input_z.shadowRoot!.querySelector(\".wrapper .label span\") as HTMLSpanElement;\r\n            label_x.style.overflow = \"unset\";\r\n            label_y.style.overflow = \"unset\";\r\n            label_z.style.overflow = \"unset\";\r\n        });\r\n        \r\n        this.input_x.addEventListener(\"change\", (event : Event)=>{\r\n            let val = (event.target! as GuiInputFloat).value;\r\n            this.value[0] = val;\r\n            this.dispatchEvent(new Event(\"change\"));\r\n        })\r\n        this.input_y.addEventListener(\"change\", (event : Event)=>{\r\n            let val = (event.target! as GuiInputFloat).value;\r\n            this.value[1] = val;\r\n            this.dispatchEvent(new Event(\"change\"));\r\n        })\r\n        this.input_z.addEventListener(\"change\", (event : Event)=>{\r\n            let val = (event.target! as GuiInputFloat).value;\r\n            this.value[2] = val;\r\n            this.dispatchEvent(new Event(\"change\"));\r\n        })\r\n\r\n    }\r\n\r\n    connectedCallback()\r\n    {\r\n        this.input_x._default_value = this.default_scalar;\r\n        this.input_y._default_value = this.default_scalar;\r\n        this.input_z._default_value = this.default_scalar;\r\n        \r\n    }\r\n\r\n    static get observedAttributes()\r\n    {\r\n        return [\"default_scalar\", \"label\"];\r\n    }\r\n\r\n    attributeChangedCallback(name : string, oldValue : any, newValue : any)\r\n    {\r\n        switch(name)\r\n        {\r\n            case 'default_scalar' :\r\n                this.default_scalar = parseFloat(newValue);\r\n                this.input_x.value = this.default_scalar;\r\n                this.input_y.value = this.default_scalar;\r\n                this.input_z.value = this.default_scalar;\r\n                break;\r\n            case 'label' :\r\n                this.label = newValue;\r\n                this.label_el.innerText = newValue;\r\n                break;\r\n            default : \r\n                break;\r\n        }\r\n    }\r\n\r\n    get value() : number[]{\r\n        return [this.input_x.value, this.input_y.value, this.input_z.value];\r\n    }\r\n\r\n    set value(val : number[])\r\n    {\r\n        console.log(\"setting values : \", val);\r\n        this.input_x.value = val[0];\r\n        this.input_y.value = val[1];\r\n        this.input_z.value = val[2];\r\n        this._value = val;\r\n    }\r\n\r\n    set default_value(val : number[])\r\n    {\r\n        this._default_value = val;\r\n        this.input_x.default_value = val[0];\r\n        this.input_y.default_value = val[1];\r\n        this.input_z.default_value = val[2];\r\n    }\r\n\r\n    set label(str : string)\r\n    {\r\n        this._label = str;\r\n        this.label_el.innerText = str;\r\n    }\r\n\r\n}\r\n\r\n\r\ncustomElements.define(\"gui-input-vector\", GuiInputVector);", "export class GuiPanel extends HTMLElement{\r\n    template_fragment : DocumentFragment;\r\n    wrapper_el : HTMLDivElement;\r\n    constructor()\r\n    {\r\n        super();\r\n        this.attachShadow({mode : \"open\"});\r\n        const styles = String.raw`\r\n            <style>\r\n                .panel{\r\n                    --scrollbar-width : 8px;\r\n                    --scrollbar-track-color : transparent;\r\n                    --scrollbar-thumb-color : gray;\r\n\r\n                    \r\n                }\r\n                \r\n                        /* For WebKit browsers (Chrome, Safari) */\r\n                        ::-webkit-scrollbar {\r\n                            width: var(--scrollbar-width);\r\n                        }\r\n\r\n                        ::-webkit-scrollbar-thumb {\r\n                            background-color: var(--scrollbar-thumb-color);\r\n                            border-radius: 6px;\r\n                        }\r\n\r\n                        ::-webkit-scrollbar-track {\r\n                            background-color: var(--scrollbar-track-color);\r\n                        }\r\n\r\n                        /* For Firefox */\r\n                        * {\r\n                            scrollbar-color: var(--scrollbar-thumb-color) var(--scrollbar-track-color);\r\n                        }\r\n\r\n                        *::-webkit-scrollbar {\r\n                            width: var(--scrollbar-width);\r\n                        }\r\n\r\n                        *::-webkit-scrollbar-thumb {\r\n                            background-color: var(--scrollbar-thumb-color);\r\n                            border-radius: 6px;\r\n                        }\r\n\r\n                        *::-webkit-scrollbar-track {\r\n                            background-color: var(--scrollbar-track-color);\r\n                        }                \r\n                #wrapper{\r\n                    position : fixed;\r\n                    top : 0px;\r\n                    right : 0px;\r\n                    padding : 0.5em;\r\n                    padding-bottom : 0;\r\n                    padding-top : 0;\r\n\r\n                    box-shadow : -2px 2px 8px #0001;\r\n                    border-radius : 0 0 0 3px;\r\n                    height : 100%;\r\n                    max-height : 100%;\r\n                    color : white;\r\n                    background-color : #111;\r\n\r\n                    transition : transform;\r\n                    transition-duration : 0.1s;\r\n\r\n                    cursor: default;\r\n                    user-select : none;\r\n                }\r\n\r\n                #wrapper.left{\r\n                    left : 0px;\r\n                    right : unset;\r\n                }\r\n\r\n                #wrapper.hidden{\r\n                    transform : translate3d(100%,0,0 );\r\n                }\r\n                \r\n                #wrapper.left.hidden{\r\n                    \r\n                    transform : translate3d(-100%,0,0 );\r\n                }\r\n\r\n                .panel{\r\n                    position : relative;\r\n                    overflow-y : scroll;\r\n                    height : calc(100% - 50px - 2em);\r\n                    width : 100%;\r\n                    padding-top : 2em;\r\n                }\r\n                .panel:after{\r\n                    content : \" \";\r\n                    position : absolute;\r\n                    width : 100%;\r\n                    height : 30px;\r\n                }\r\n\r\n                #wrapper .close_btn{\r\n                    position : relative;\r\n                    top : 0;\r\n                    cursor : pointer;\r\n                    height : calc(50px);\r\n                    margin-top : 2px;\r\n                    margin-left : 0px;\r\n                    opacity : 0.5;\r\n                    /* outline : 1px solid white; */\r\n                    width : 100%;\r\n                }\r\n\r\n                #wrapper.left .close_btn{\r\n                    right : 0px;\r\n                    width : 100%;\r\n                    margin-left : auto;\r\n                    margin-right : 1em;\r\n                }\r\n\r\n                #wrapper .close_btn:hover{\r\n                    opacity : 1.0;\r\n                }\r\n\r\n                #wrapper .close_btn::before{\r\n                    content : '';\r\n                    position : absolute;\r\n                    top : 0; \r\n                    left : 0;\r\n                    width : 4px;\r\n                    height : 100%;\r\n                    border-radius : 5px;\r\n                    background-color : #eee;\r\n                    transform-origin : 50% 50%;\r\n                    transform :  translateX(20px) rotate(45deg);\r\n                }\r\n                #wrapper .close_btn::after{\r\n                    content : '';\r\n                    position : absolute;\r\n                    top : 0; \r\n                    left : 0;\r\n                    width : 4px;\r\n                    height : 100%;\r\n                    border-radius : 5px;\r\n                    background-color : #eee;\r\n                    transform-origin : 50% 50%;\r\n                    transform : translateX(20px) rotate(-45deg);\r\n                }\r\n\r\n                #wrapper .open_btn{\r\n                    display : flex;\r\n                    align-items : center;\r\n                    justify-content : center;\r\n                    font-weight : bold;\r\n                    font-size : 2em;\r\n                    position : absolute;\r\n                    width : 25px;\r\n                    height : 25px;\r\n                    background-color : transparent; \r\n                    opacity : 0.5;\r\n                    filter : drop-shadow(2px 2px 2px pink);\r\n                    top : 0;\r\n                    left : 0;  \r\n                    z-index : 2;\r\n                    margin-left : -25px;\r\n                    visibility : hidden;\r\n                }\r\n                #wrapper .open_btn:hover{\r\n                    opacity : 0.9;\r\n                }\r\n\r\n                #wrapper.left .open_btn{\r\n                    left : unset;\r\n                    right : -25px;\r\n                }\r\n                #wrapper.hidden>.open_btn{\r\n                    visibility : visible;\r\n                }\r\n            </style>\r\n        `;\r\n        \r\n        const template = String.raw`\r\n            \r\n            ${styles}\r\n            <!-- <div id=\"wrapper\" oncontextmenu=\"return false;\"> -->\r\n            <div id=\"wrapper\" >\r\n                <div class=\"open_btn\">&lt;</div>\r\n                <div class=\"close_btn\"></div>\r\n                <div class=\"panel\">\r\n                    <slot></slot>\r\n                </div>\r\n            </div>\r\n        `;\r\n        this.template_fragment = document.createRange().createContextualFragment(template);\r\n        this.shadowRoot?.appendChild(this.template_fragment.cloneNode(true));\r\n\r\n        let close_btn = this.shadowRoot?.querySelector(\".close_btn\");\r\n        let open_btn = this.shadowRoot?.querySelector(\".open_btn\");\r\n        this.wrapper_el = this.shadowRoot?.querySelector(\"#wrapper\") as HTMLDivElement;\r\n        close_btn?.addEventListener(\"click\", (event : Event)=>{\r\n            this.wrapper_el!.classList.add(\"hidden\");\r\n        });\r\n        open_btn?.addEventListener(\"click\", (event : Event)=>{\r\n            this.wrapper_el!.classList.remove(\"hidden\");\r\n        });\r\n\r\n        document.addEventListener(\"keypress\", (event)=>{\r\n            if(event.key === \"h\")\r\n            {\r\n                this.wrapper_el!.classList.toggle(\"hidden\");\r\n            }\r\n        });\r\n   \r\n    }\r\n\r\n    connectedCallback(){\r\n    }\r\n\r\n    static get observedAttributes(){\r\n        return [\"side\"];\r\n    }\r\n\r\n\r\n    attributeChangedCallback(name : string, oldValue : any, newValue : any) {\r\n        switch(name){\r\n            case 'side' :\r\n                this.wrapper_el.classList.add(newValue);\r\n                break;\r\n        }\r\n    }    \r\n}\r\n\r\ncustomElements.define(\"gui-panel\", GuiPanel);\r\n", "export class GuiSeparator extends HTMLElement{\r\n    template_fragment : DocumentFragment;\r\n    constructor(){\r\n        super();\r\n        this.attachShadow({mode : \"open\"});\r\n        const styles = String.raw`<style>\r\n\r\n            hr{\r\n                opacity : 0.1;\r\n            }\r\n        </style>`;\r\n        const template = String.raw`\r\n            ${styles}\r\n            <hr>\r\n        `;\r\n        this.template_fragment = document.createRange().createContextualFragment(template);\r\n        this.shadowRoot?.appendChild(this.template_fragment.cloneNode(true));\r\n    }\r\n\r\n\r\n    connectedCallback(){\r\n    }\r\n\r\n\r\n    static get observedAttributes(){\r\n        return [];\r\n    }\r\n\r\n\r\n    attributeChangedCallback(name : string, oldValue : any, newValue : any) {\r\n    \r\n    }\r\n}\r\ncustomElements.define(\"gui-separator\", GuiSeparator);", "export class GuiTitle extends HTMLElement {\r\n  title: string = 'Hello, World!';\r\n\r\n  constructor() {\r\n    super();\r\n    this.attachShadow({ mode: 'open' }); \r\n  }\r\n\r\n  connectedCallback() {\r\n    this.render();\r\n  }\r\n\r\n  render() {\r\n    this.shadowRoot!.innerHTML = String.raw`\r\n      <style>\r\n        :host {\r\n          display: block;\r\n        }\r\n\r\n      </style>\r\n      <h2><slot></slot></h2>\r\n    `;\r\n  }\r\n}\r\n  \r\n// Register the custom element\r\ncustomElements.define('gui-title', GuiTitle);", "import { GuiAccordion } from \"./g2_accordion\";\r\nimport { GuiCheckbox } from \"./g2_checkbox\";\r\nimport { GuiCollapsible } from \"./g2_collapsible\";\r\nimport { GuiColorPicker } from \"./g2_color_picker\";\r\nimport { GuiCombobox } from \"./g2_combobox\";\r\nimport { GuiGroup } from \"./g2_group\";\r\nimport { GuiInputColor } from \"./g2_input_color\";\r\nimport { GuiInputFloat } from \"./g2_input_float\";\r\nimport { GuiInputVector } from \"./g2_input_vector\";\r\nimport { GuiPanel } from \"./g2_panel\";\r\nimport { GuiSeparator } from \"./g2_separator\";\r\nimport { GuiTitle } from \"./g2_title\";\r\n\r\nmodule.exports = [ GuiAccordion, GuiCheckbox, GuiCollapsible, GuiColorPicker, GuiCombobox, GuiGroup, GuiInputColor, GuiInputFloat, GuiInputVector, GuiPanel, GuiSeparator, GuiTitle]\r\n"],
  "mappings": ";;;;;;;;;AAAA,IACa;AADb;AAAA;AAAA;AACO,IAAM,eAAN,cAA2B,YAAW;AAAA,MACzC;AAAA,MACA,eAAkC,CAAC;AAAA,MACnC,cAAa;AACT,cAAM;AACN,aAAK,aAAa,EAAC,MAAO,OAAM,CAAC;AACjC,cAAM,SAAS,OAAO;AAAA;AAAA;AAGtB,cAAM,WAAW,OAAO;AAAA,cAClB,MAAM;AAAA;AAAA;AAGZ,aAAK,oBAAoB,SAAS,YAAY,EAAE,yBAAyB,QAAQ;AACjF,aAAK,YAAY,YAAY,KAAK,kBAAkB,UAAU,IAAI,CAAC;AAAA,MAKvE;AAAA,MACA,KAAK,QAAyB;AAC1B,aAAK,aAAa,QAAQ,CAAC,MAAM,UAAQ;AAErC,cAAG,SAAS,QAAO;AACf,iBAAK,aAAa,UAAU,MAAM;AAAA,UACtC;AAAA,QACJ,CAAC;AAAA,MACL;AAAA,MAEA,oBAAmB;AACf,cAAM,OAAO,KAAK,WAAY,cAAc,MAAM;AAElD,aAAK,eAAe,CAAC;AAErB,cAAM,iBAAiB,cAAc,MAAI;AACrC,mBAAQ,QAAQ,MAAM,cAAc,GACpC;AACI,gBAAG,KAAK,aAAa,mBAAkB;AAEnC,kBAAI,OAAO;AACX,mBAAK,iBAAiB,QAAQ,CAAC,OAAa;AACxC,qBAAK,KAAK,GAAG,MAAwB;AAAA,cACzC,CAAC;AAGD,mBAAK,aAAa,KAAK,IAAI;AAAA,YAC/B;AAAA,UACJ;AAAA,QACJ,CAAC;AAAA,MACL;AAAA,MAEA,kBACA;AACI,gBAAQ,IAAI,SAAS;AAAA,MACzB;AAAA,MAEA,WAAW,qBAAoB;AAC3B,eAAO,CAAC;AAAA,MACZ;AAAA,MAGA,yBAAyB,MAAe,UAAgB,UAAgB;AAAA,MAExE;AAAA,IACJ;AACA,mBAAe,OAAO,iBAAiB,YAAY;AAAA;AAAA;;;AClEnD,IAAa;AAAb;AAAA;AAAA;AAAO,IAAM,cAAN,cAA0B,YAAW;AAAA,MACxC;AAAA,MAEA,SAAkB;AAAA,MAClB;AAAA,MACA;AAAA,MACA,QAAkB;AAAA,MAClB,cAAa;AACT,cAAM;AACN,aAAK,aAAa,EAAC,MAAO,OAAM,CAAC;AACjC,cAAM,SAAS,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsEtB,cAAM,WAAW,OAAO;AAAA,cAClB,MAAM;AAAA;AAAA;AAAA,4CAGwB,KAAK,QAAQ,YAAW,EAAE,KAAK,KAAK,MAAM;AAAA,iCACrD,KAAK,QAAQ,YAAW,EAAE;AAAA;AAAA,mDAER,KAAK,QAAQ,YAAW,EAAE;AAAA;AAAA;AAGrE,aAAK,oBAAoB,SAAS,YAAY,EAAE,yBAAyB,QAAQ;AACjF,aAAK,YAAY,YAAY,KAAK,kBAAkB,UAAU,IAAI,CAAC;AAEnE,aAAK,WAAW,KAAK,WAAY,cAAc,OAAO;AACtD,aAAK,YAAY,KAAK,WAAY,cAAc,SAAS;AAEzD,YAAI,WAAW,KAAK,WAAY,cAAc,WAAW;AACzD,iBAAS,iBAAiB,UAAU,CAAC,UAAgB;AACjD,cAAIA,YAAY,MAAM;AAEtB,eAAK,QAAQA,UAAS,gBAAgB,SAAS;AAC/C,eAAK,UAAU,UAAU,OAAO,SAAS;AACzC,eAAK,SAAS,UAAU,OAAO,SAAS;AACxC,cAAI,KAAK,IAAI,MAAM,QAAQ;AAC3B,eAAK,cAAc,EAAE;AAAA,QACzB,CAAC;AAAA,MACL;AAAA,MAGA,oBAAmB;AAAA,MACnB;AAAA,MAGA,WAAW,qBAAoB;AAC3B,eAAO,CAAC,OAAO;AAAA,MACnB;AAAA,MAGA,IAAI,MAAM,KACV;AACI,YAAG,KAAK,UACR;AACI,eAAK,SAAS,YAAY,SAAS,GAAG;AAAA,QAC1C;AAAA,MACJ;AAAA,MACA,yBAAyB,MAAe,UAAgB,UAAgB;AACpE,gBAAO,MACP;AAAA,UACI,KAAK;AACD,iBAAK,QAAQ;AACb;AAAA,UACJ,KAAK;AACD,iBAAK,QAAQ;AAEb;AAAA,UACJ;AAAU;AAAA,QACd;AAAA,MACJ;AAAA,IACJ;AACA,mBAAe,OAAO,gBAAgB,WAAW;AAAA;AAAA;;;AC3IjD,IAAa;AAAb;AAAA;AAAA;AAAO,IAAM,iBAAN,cAA6B,YAAW;AAAA,MAC3C;AAAA,MAEA,SAAmB;AAAA,MACnB,SAAkB;AAAA,MAClB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,cAAa;AACT,cAAM;AACN,aAAK,aAAa,EAAC,MAAO,OAAM,CAAC;AACjC,cAAM,SAAS,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0EtB,aAAK,SAAS;AACd,cAAM,WAAW,OAAO;AAAA;AAAA,cAElB,MAAM;AAAA;AAAA;AAAA,2FAGuE,KAAK,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQ7F,aAAK,oBAAoB,SAAS,YAAY,EAAE,yBAAyB,QAAQ;AACjF,aAAK,YAAY,YAAY,KAAK,kBAAkB,UAAU,IAAI,CAAC;AAEnE,aAAK,YAAY,KAAK,WAAY,cAAc,SAAS;AACzD,aAAK,WAAW,KAAK,WAAY,cAAc,gBAAgB;AAC/D,aAAK,WAAW,KAAK,WAAY,cAAc,QAAQ;AAEvD,aAAK,aAAa,KAAK,WAAY,cAAc,UAAU;AAAA,MAG/D;AAAA,MAGA,oBAAmB;AAEf,YAAG,KAAK,QACR;AACI,eAAK,UAAU,aAAa,UAAU,MAAM;AAC5C,eAAK,WAAW,aAAa,UAAU,MAAM;AAC7C,eAAK,SAAS,UAAU,IAAI,QAAQ;AACpC,eAAK,UAAU,UAAU,IAAI,QAAQ;AACrC,eAAK,WAAW,UAAU,IAAI,QAAQ;AAAA,QAE1C;AACA,aAAK,UAAU,iBAAiB,SAAS,CAAC,UAAqB;AAC3D,eAAK,SAAS,UAAU,OAAO,QAAQ;AACvC,eAAK,UAAU,UAAU,OAAO,QAAQ;AACxC,eAAK,WAAW,UAAU,OAAO,QAAQ;AAEzC,cAAG,KAAK,UAAU,UAAU,SAAS,QAAQ,GAC7C;AACI,iBAAK,SAAS;AAAA,UAClB,OAAK;AACD,iBAAK,SAAS;AACd,gBAAI,KAAK,IAAI,MAAM,MAAM;AACzB,iBAAK,cAAc,EAAE;AAAA,UACzB;AAAA,QACJ,CAAC;AAAA,MACL;AAAA,MAEA,WAAW,qBACX;AACI,eAAO,CAAC,SAAS,QAAQ;AAAA,MAC7B;AAAA,MAEA,IAAI,MAAM,KACV;AACI,aAAK,SAAS;AACd,YAAG,KAAK,UACR;AACI,eAAK,SAAS,YAAY;AAAA,QAC9B;AAAA,MACJ;AAAA,MACA,yBAAyB,MAAe,UAAgB,UAAgB;AACpE,gBAAO,MACP;AAAA,UACI,KAAK;AACD,iBAAK,QAAQ;AACb,gBAAI,OAAO,KAAK,YAAY,cAAc,cAAc;AACxD,iBAAK,YAAY;AACjB;AAAA,UACJ,KAAK;AACD,gBAAG,aAAa;AAAI,mBAAK,SAAS;AAAA,qBAC1B,aAAa;AAAQ,mBAAK,SAAS;AAAA,qBACnC,aAAa;AAAS,mBAAK,SAAS;AAE5C,gBAAG,KAAK,QACR;AACI,mBAAK,SAAS,UAAU,IAAI,QAAQ;AACpC,mBAAK,UAAU,UAAU,IAAI,QAAQ;AACrC,mBAAK,WAAW,UAAU,IAAI,QAAQ;AAAA,YAC1C,OAAK;AACD,mBAAK,SAAS,UAAU,OAAO,QAAQ;AACvC,mBAAK,UAAU,UAAU,OAAO,QAAQ;AACxC,mBAAK,WAAW,UAAU,OAAO,QAAQ;AAAA,YAC7C;AAEA;AAAA,UACJ;AAAU;AAAA,QACd;AAAA,MAEJ;AAAA,IACJ;AACA,mBAAe,OAAO,mBAAmB,cAAc;AAAA;AAAA;;;ACvLvD,IAAa;AAAb;AAAA;AAAA;AAAO,IAAM,iBAAN,cAA6B,YAAW;AAAA,MAC3C;AAAA,MACA,cAAa;AACT,cAAM;AACN,aAAK,aAAa,EAAC,MAAO,OAAM,CAAC;AACjC,cAAM,SAAS,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBtB,cAAM,WAAW,OAAO;AAAA;AAAA,cAElB,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAMZ,aAAK,oBAAoB,SAAS,YAAY,EAAE,yBAAyB,QAAQ;AACjF,aAAK,YAAY,YAAY,KAAK,kBAAkB,UAAU,IAAI,CAAC;AAAA,MACvE;AAAA,MAGA,oBAAmB;AAAA,MACnB;AAAA,MAGA,WAAW,qBAAoB;AAC3B,eAAO,CAAC;AAAA,MACZ;AAAA,MAGA,yBAAyB,MAAe,UAAgB,UAAgB;AAAA,MAExE;AAAA,IACJ;AACA,mBAAe,OAAO,oBAAoB,cAAc;AAAA;AAAA;;;AC/CxD,IAAa;AAAb;AAAA;AAAA;AAAO,IAAM,cAAN,cAA0B,YAAW;AAAA,MACxC;AAAA,MAEA,SAAkB;AAAA,MAClB;AAAA,MACA;AAAA,MAEA,SAAkB;AAAA,MAClB,iBAA0B;AAAA,MAC1B,cAAa;AACT,cAAM;AACN,aAAK,aAAa,EAAC,MAAO,OAAM,CAAC;AACjC,cAAM,SAAS,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkCtB,cAAM,WAAW,OAAO;AAAA,cAClB,MAAM;AAAA;AAAA;AAAA,gCAGY,KAAK,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOnC,aAAK,oBAAoB,SAAS,YAAY,EAAE,yBAAyB,QAAQ;AACjF,aAAK,WAAY,YAAY,KAAK,kBAAkB,UAAU,IAAI,CAAC;AACnE,aAAK,UAAU,KAAK,WAAY,cAAc,UAAU;AACxD,aAAK,WAAW,KAAK,WAAY,cAAc,OAAO;AAAA,MAI1D;AAAA,MAEA,IAAI,MAAM,KACV;AACI,YAAG,KAAK,UACR;AACI,eAAK,SAAS;AACd,eAAK,SAAS,YAAY;AAAA,QAC9B;AAAA,MACJ;AAAA,MAEA,IAAI,cAAc,OAClB;AACI,aAAK,iBAAiB;AAAA,MAC1B;AAAA,MAEA,IAAI,gBACJ;AACI,eAAO,KAAK;AAAA,MAChB;AAAA,MAEA,IAAI,QACJ;AACI,eAAO,KAAK;AAAA,MAChB;AAAA,MAEA,IAAI,MAAM,KACV;AACI,aAAK,SAAS;AAAA,MAClB;AAAA,MAEA,oBAAmB;AACf,cAAM,OAAO,KAAK,YAAY,cAAc,MAAM;AAGlD,YAAI,eAA0C,CAAC;AAC/C,cAAM,iBAAiB,cAAc,MAAI;AACrC,mBAAQ,QAAQ,MAAM,cAAc,GACpC;AAEI,gBAAG,KAAK,aAAa,UAAS;AAG1B,kBAAI,OAAO;AAEX,2BAAa,KAAK,IAAI;AAEtB,mBAAK,YAAY,IAAI;AAAA,YAGzB;AAAA,UACJ;AAEA,cAAI,aAAa,KAAK,WAAY,cAAc,iBAAiB;AACjE,cAAG,eAAe,MAClB;AAEI,iBAAK,QAAQ,YAAY,UAAU;AAAA,UACvC;AACA,cAAI,SAA6B,SAAS,cAAc,QAAQ;AAChE,iBAAO,KAAK;AACZ,iBAAO,iBAAiB,UAAU,CAAC,UAAc;AAC7C,gBAAI,MAAM,MAAM;AAGhB,iBAAK,QAAQ,IAAI;AACjB,iBAAK,gBAAgB,IAAI;AACzB,gBAAI,KAAI,IAAI,MAAM,UAAU,CAAC,CAAC;AAE9B,iBAAK,cAAc,EAAE;AAAA,UAEzB,CAAC;AACD,mBAAQ,UAAU,cAClB;AACI,gBAAI,MAAM,SAAS,cAAc,QAAQ;AACzC,gBAAI,YAAY,OAAO;AAEvB,mBAAO,YAAY,GAAG;AAAA,UAC1B;AACA,eAAK,QAAQ,YAAY,MAAM;AAAA,QACnC,CAAC;AAAA,MACL;AAAA,MAGA,WAAW,qBAAoB;AAC3B,eAAO,CAAC,OAAO;AAAA,MACnB;AAAA,MAGA,yBAAyB,MAAe,UAAgB,UAAgB;AACpE,gBAAO,MAAK;AAAA,UACR,KAAK;AACD,gBAAG,KAAK,UAAS;AACb,mBAAK,SAAS,YAAY;AAAA,YAC9B;AAAA,UACJ;AAAU;AAAA,QACd;AAAA,MACJ;AAAA,IACJ;AACA,mBAAe,OAAO,gBAAgB,WAAW;AAAA;AAAA;;;ACnKjD,IAAa;AAAb;AAAA;AAAA;AAAO,IAAM,WAAN,cAAuB,YAAW;AAAA,MACrC;AAAA,MAEA,SAAkB;AAAA,MAClB;AAAA,MACA,cAAa;AACT,cAAM;AACN,aAAK,aAAa,EAAC,MAAO,OAAM,CAAC;AACjC,cAAM,SAAS,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyBtB,cAAM,WAAW,OAAO;AAAA,cAClB,MAAM;AAAA;AAAA;AAAA;AAAA,iCAIa,KAAK,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAMpC,aAAK,oBAAoB,SAAS,YAAY,EAAE,yBAAyB,QAAQ;AACjF,aAAK,YAAY,YAAY,KAAK,kBAAkB,UAAU,IAAI,CAAC;AAEnE,aAAK,WAAW,KAAK,WAAY,cAAc,QAAQ;AAAA,MAC3D;AAAA,MAGA,oBAAmB;AAAA,MACnB;AAAA,MAGA,WAAW,qBAAoB;AAC3B,eAAO,CAAC,OAAO;AAAA,MACnB;AAAA,MAEA,IAAI,MAAM,KACV;AACI,YAAG,KAAK,UACR;AACI,eAAK,SAAS;AACd,eAAK,SAAS,YAAY;AAAA,QAC9B;AAAA,MACJ;AAAA,MAGA,yBAAyB,MAAe,UAAgB,UAAgB;AACpE,gBAAO,MACP;AAAA,UACI,KAAK;AACD,iBAAK,QAAQ;AACb;AAAA,UACJ;AAAU;AAAA,QACd;AAAA,MACJ;AAAA,IACJ;AACA,mBAAe,OAAO,aAAa,QAAQ;AAAA;AAAA;;;AC/E3C,IAEa;AAFb;AAAA;AAAA;AAEO,IAAM,gBAAN,cAA4B,YAAW;AAAA,MAC1C;AAAA,MAEA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,iBAA0B;AAAA,MAC1B,SAAkB;AAAA,MAEV,SAAoB,CAAC,GAAE,GAAE,CAAC;AAAA,MAC1B,iBAA4B,CAAC,GAAE,GAAE,CAAC;AAAA,MAE1C;AAAA,MACA,cACA;AACI,cAAM;AACN,aAAK,aAAa,EAAC,MAAO,OAAM,CAAC;AAEjC,cAAM,SAAS,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAetB,cAAM,eAAe,OAAO;AAAA;AAAA,cAEtB,MAAM;AAAA;AAAA,qCAEiB,KAAK,MAAM;AAAA;AAAA,2FAE2C,KAAK,cAAc;AAAA,2FACnB,KAAK,cAAc;AAAA,2FACnB,KAAK,cAAc;AAAA;AAAA;AAAA;AAAA;AAMtG,aAAK,oBAAoB,SAAS,YAAY,EAAE,yBAAyB,YAAY;AACrF,aAAK,WAAY,YAAY,KAAK,kBAAkB,UAAU,IAAI,CAAC;AAEnE,aAAK,WAAW,KAAK,WAAY,cAAc,QAAQ;AACvD,aAAK,UAAU,KAAK,WAAY,cAAc,UAAU;AACxD,aAAK,UAAU,KAAK,WAAY,cAAc,UAAU;AACxD,aAAK,UAAU,KAAK,WAAY,cAAc,UAAU;AAExD,gBAAQ,IAAI;AAAA,UACR,eAAe,YAAY,iBAAiB;AAAA,UAC5C,eAAe,YAAY,kBAAkB;AAAA,QACjD,CAAC,EAAE,KAAK,MAAI;AACR,cAAI,UAAU,KAAK,QAAQ,WAAY,cAAc,sBAAsB;AAC3E,cAAI,UAAU,KAAK,QAAQ,WAAY,cAAc,sBAAsB;AAC3E,cAAI,UAAU,KAAK,QAAQ,WAAY,cAAc,sBAAsB;AAC3E,kBAAQ,MAAM,WAAW;AACzB,kBAAQ,MAAM,WAAW;AACzB,kBAAQ,MAAM,WAAW;AAAA,QAC7B,CAAC;AAED,aAAK,YAAY,KAAK,WAAY,cAAc,kBAAkB;AAElE,aAAK,QAAQ,iBAAiB,UAAU,CAAC,UAAgB;AACrD,cAAI,MAAO,MAAM,OAA0B;AAC3C,eAAK,MAAM,CAAC,IAAI;AAChB,eAAK,cAAc,IAAI,MAAM,QAAQ,CAAC;AACtC,eAAK,aAAa;AAAA,QACtB,CAAC;AACD,aAAK,QAAQ,iBAAiB,UAAU,CAAC,UAAgB;AACrD,cAAI,MAAO,MAAM,OAA0B;AAC3C,eAAK,MAAM,CAAC,IAAI;AAChB,eAAK,cAAc,IAAI,MAAM,QAAQ,CAAC;AACtC,eAAK,aAAa;AAAA,QACtB,CAAC;AACD,aAAK,QAAQ,iBAAiB,UAAU,CAAC,UAAgB;AACrD,cAAI,MAAO,MAAM,OAA0B;AAC3C,eAAK,MAAM,CAAC,IAAI;AAChB,eAAK,cAAc,IAAI,MAAM,QAAQ,CAAC;AACtC,eAAK,aAAa;AAAA,QACtB,CAAC;AAAA,MAEL;AAAA,MAEA,oBACA;AACI,aAAK,QAAQ,iBAAiB,KAAK;AACnC,aAAK,QAAQ,iBAAiB,KAAK;AACnC,aAAK,QAAQ,iBAAiB,KAAK;AAEnC,aAAK,aAAa;AAAA,MAGtB;AAAA,MAEA,eACA;AACI,aAAK,YAAY;AACjB,aAAK,UAAU,MAAM,kBAAkB,OAAO,KAAK,QAAQ,QAAQ,GAAG,IAAI,KAAK,QAAQ,QAAQ,GAAG,IAAI,KAAK,QAAQ,QAAQ,GAAG;AAAA,MAClI;AAAA,MAEA,cACA;AACI,YAAG,KAAK,QAAQ,QAAQ;AAAK,eAAK,QAAQ,QAAQ;AAAA,iBAC1C,KAAK,QAAQ,QAAQ;AAAK,eAAK,QAAQ,QAAQ;AAEvD,YAAG,KAAK,QAAQ,QAAQ;AAAK,eAAK,QAAQ,QAAQ;AAAA,iBAC1C,KAAK,QAAQ,QAAQ;AAAK,eAAK,QAAQ,QAAQ;AAEvD,YAAG,KAAK,QAAQ,QAAQ;AAAK,eAAK,QAAQ,QAAQ;AAAA,iBAC1C,KAAK,QAAQ,QAAQ;AAAK,eAAK,QAAQ,QAAQ;AAAA,MAC3D;AAAA,MACA,WAAW,qBACX;AACI,eAAO,CAAC,kBAAkB,OAAO;AAAA,MACrC;AAAA,MAEA,yBAAyB,MAAe,UAAgB,UACxD;AACI,gBAAO,MACP;AAAA,UACI,KAAK;AACD,iBAAK,iBAAiB,WAAW,QAAQ;AACzC,iBAAK,QAAQ,QAAQ,KAAK;AAC1B,iBAAK,QAAQ,QAAQ,KAAK;AAC1B,iBAAK,QAAQ,QAAQ,KAAK;AAC1B;AAAA,UACJ,KAAK;AACD,iBAAK,QAAQ;AACb,iBAAK,SAAS,YAAY;AAC1B;AAAA,UACJ;AACI;AAAA,QACR;AAAA,MACJ;AAAA,MAEA,IAAI,QAAkB;AAClB,eAAO,CAAC,KAAK,QAAQ,OAAO,KAAK,QAAQ,OAAO,KAAK,QAAQ,KAAK;AAAA,MACtE;AAAA,MAEA,IAAI,MAAM,KACV;AACI,gBAAQ,IAAI,qBAAqB,GAAG;AACpC,aAAK,QAAQ,QAAQ,IAAI,CAAC;AAC1B,aAAK,QAAQ,QAAQ,IAAI,CAAC;AAC1B,aAAK,QAAQ,QAAQ,IAAI,CAAC;AAC1B,aAAK,SAAS;AAEd,aAAK,aAAa;AAAA,MACtB;AAAA,MAEA,IAAI,cAAc,KAClB;AACI,aAAK,iBAAiB;AACtB,aAAK,QAAQ,gBAAgB,IAAI,CAAC;AAClC,aAAK,QAAQ,gBAAgB,IAAI,CAAC;AAClC,aAAK,QAAQ,gBAAgB,IAAI,CAAC;AAAA,MACtC;AAAA,MAEA,IAAI,MAAM,KACV;AACI,aAAK,SAAS;AACd,aAAK,SAAS,YAAY;AAAA,MAC9B;AAAA,IAEJ;AAGA,mBAAe,OAAO,mBAAmB,aAAa;AAAA;AAAA;;;ACjLtD,IAAa;AAAb;AAAA;AAAA;AAAO,IAAM,gBAAN,cAA4B,YAAY;AAAA,MAEnC;AAAA,MACR,gBAAwB;AAAA,MACxB,eAAuB;AAAA,MACvB,iBAAyB;AAAA,MAEzB,YAAoB;AAAA,MACpB,YAAoB;AAAA,MAEpB,SAAiB;AAAA,MACjB;AAAA,MACA,SAAiB;AAAA,MACjB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MAEA;AAAA,MACA;AAAA,MAEA,iBAAyB;AAAA,MACzB,eAAwB;AAAA,MACxB,gBAAyB;AAAA,MAEzB,cAAc;AACV,cAAM;AAEN,aAAK,aAAa,EAAE,MAAM,OAAO,CAAC;AAClC,aAAK,SAAS;AACd,aAAK,QAAQ;AACb,aAAK,QAAQ;AAEb,aAAK,gBAAgB;AACrB,aAAK,cAAc;AAEnB,aAAK,SAAS;AACd,aAAK,SAAS,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCA8BQ,KAAK,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwDxC,cAAM,WAAW,OAAO;AAAA;AAAA,cAElB,KAAK,MAAM;AAAA;AAAA;AAAA,4CAGmB,KAAK,MAAM,WAAW,KAAK,MAAM;AAAA;AAAA,0DAEnB,KAAK,KAAK;AAAA;AAAA;AAAA;AAAA;AAM5D,aAAK,oBAAoB,SAAS,YAAY,EAAE,yBAAyB,QAAQ;AACjF,aAAK,YAAY,YAAY,KAAK,kBAAkB,UAAU,IAAI,CAAC;AAEnE,aAAK,WAAW,KAAK,WAAY,cAAc,QAAQ;AAKvD,aAAK,cAAc,KAAK,WAAY,cAAc,OAAO;AACzD,aAAK,eAAe,KAAK,WAAY,cAAc,aAAa;AAGhE,aAAK,cAAc,iBAAiB,SAAS,CAAC,UAAgB;AAC1D,kBAAQ,IAAI,KAAK;AAAA,QAErB,CAAC;AAAA,MAEL;AAAA,MAEA,oBAAoB;AAEhB,iBAAS,iBAAiB,WAAW,CAAC,UAAyB;AAC3D,cAAI,MAAM,SAAS;AACf,iBAAK,eAAe;AAAA,UACxB;AACA,cAAI,MAAM,UAAU;AAChB,iBAAK,gBAAgB;AAAA,UACzB;AAAA,QACJ,CAAC;AACD,iBAAS,iBAAiB,SAAS,CAAC,UAAyB;AAEzD,cAAI,MAAM,OAAO,WAAW;AACxB,iBAAK,eAAe;AAAA,UAExB;AACA,cAAI,MAAM,OAAO,SAAS;AACtB,iBAAK,gBAAgB;AAAA,UACzB;AAAA,QACJ,CAAC;AACD,aAAK,YAAY,iBAAiB,SAAS,CAAC,UAAiB;AACzD,eAAK,SAAS,WAAW,KAAK,YAAY,KAAK;AAE/C,eAAK,cAAc;AAAA,QACvB,CAAC;AAED,aAAK,YAAY,iBAAiB,YAAY,CAAC,UAAyB;AACpE,cAAI,MAAM,QAAQ,SAAS;AACvB,iBAAK,YAAY,KAAK;AACtB,iBAAK,cAAc;AAAA,UACvB;AAAA,QACJ,CAAC;AAED,aAAK,YAAY,iBAAiB,QAAQ,CAAC,UAAiB;AACxD,eAAK,cAAc;AAAA,QACvB,CAAC;AAED,aAAK,SAAS,iBAAiB,aAAa,CAAC,UAAsB;AAE/D,eAAK,eAAe;AACpB,cAAI,MAAM,WAAW,GAAG;AACpB,iBAAK,gBAAgB;AACrB,iBAAK,iBAAiB,MAAM;AAAA,UAChC,WAAW,MAAM,WAAW,GAAG;AAC3B,iBAAK,YAAY,QAAQ,KAAK,eAAe,SAAS;AACtD,iBAAK,QAAQ,KAAK;AAAA,UACtB;AAAA,QACJ,CAAC;AAED,iBAAS,iBAAiB,WAAW,CAAC,UAAsB;AACxD,eAAK,gBAAgB;AACrB,cAAI,MAAM,WAAW,GAAG;AACpB,gBAAI,KAAK,kBAAkB,GAAG;AAC1B,mBAAK,QAAQ,KAAK;AAClB,mBAAK,gBAAgB;AAAA,YACzB;AAAA,UACJ;AAAA,QACJ,CAAC;AAED,iBAAS,iBAAiB,aAAa,CAAC,UAAsB;AAE1D,cAAI,KAAK,eAAe;AACpB,gBAAI,OAAQ,MAAM,QAAQ,KAAK;AAC/B,gBAAI,OAAO;AACX,gBAAI,KAAK;AAAc,sBAAQ;AAAA,qBACtB,KAAK;AAAe,sBAAQ;AAErC,oBAAQ;AACR,iBAAK,YAAY,SAAS,KAAK,QAAQ,MAAM,SAAS;AACtD,iBAAK,gBAAiB,KAAK,QAAQ;AACnC,iBAAK,eAAe;AAEpB,iBAAK,SAAS;AACd,iBAAK,cAAc;AAGnB,iBAAK,iBAAiB,MAAM;AAAA,UAChC;AAAA,QACJ,CAAC;AAAA,MACL;AAAA,MAGA,WAAW,qBAAqB;AAC5B,eAAO,CAAC,SAAS,SAAS,eAAe;AAAA,MAC7C;AAAA,MAEA,gBAAgB;AACZ,YAAI,KAAK,IAAI,MAAM,UAAU;AAAA;AAAA;AAAA,QAI7B,CAAC;AAED,aAAK,cAAc,EAAE;AAAA,MACzB;AAAA,MACA,IAAI,MAAM,KAAa;AACnB,aAAK,SAAS;AACd,aAAK,YAAY,QAAQ,IAAI,SAAS;AACtC,aAAK,cAAc;AAAA,MACvB;AAAA,MAEA,IAAI,QAAQ;AACR,eAAO,KAAK;AAAA,MAChB;AAAA,MAEA,IAAI,cAAc,KAAa;AAC3B,aAAK,iBAAiB;AAAA,MAC1B;AAAA,MAEA,IAAI,MAAM,KAAa;AACnB,aAAK,SAAS;AAAA,MAClB;AAAA,MAEA,IAAI,MAAM,KAAa;AACnB,aAAK,SAAS;AACd,YAAI,KAAK,UAAU;AACf,eAAK,SAAS,YAAY,SAAS,GAAG;AACtC,eAAK,SAAS,aAAa,SAAS,GAAG;AAAA,QAC3C;AAAA,MACJ;AAAA,MAGA,yBAAyB,MAAc,UAAe,UAAe;AACjE,gBAAQ,MAAM;AAAA,UACV,KAAK;AACD,iBAAK,SAAS,MAAM,kBAAkB;AAGtC;AAAA,UACJ,KAAK;AACD,iBAAK,QAAQ;AACb;AAAA,UACJ,KAAK;AACD,iBAAK,iBAAiB,WAAW,QAAQ;AACzC,iBAAK,QAAQ,KAAK;AAElB;AAAA,UACJ;AACI;AAAA,QACR;AAAA,MACJ;AAAA,IAEJ;AAEA,mBAAe,OAAO,mBAAmB,aAAa;AAAA;AAAA;;;AC3StD,IACa;AADb;AAAA;AAAA;AACO,IAAM,iBAAN,cAA6B,YAAW;AAAA,MAC3C;AAAA,MAEA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,iBAA0B;AAAA,MAC1B,SAAkB;AAAA,MAEV,SAAoB,CAAC,GAAE,GAAE,CAAC;AAAA,MAC1B,iBAA4B,CAAC,GAAE,GAAE,CAAC;AAAA,MAC1C,cACA;AACI,cAAM;AACN,aAAK,aAAa,EAAC,MAAO,OAAM,CAAC;AAEjC,cAAM,SAAS,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA+BtB,cAAM,eAAe,OAAO;AAAA;AAAA,cAEtB,MAAM;AAAA;AAAA,qCAEiB,KAAK,MAAM;AAAA;AAAA,2FAE2C,KAAK,cAAc;AAAA,2FACnB,KAAK,cAAc;AAAA,2FACnB,KAAK,cAAc;AAAA;AAAA;AAAA;AAKtG,aAAK,oBAAoB,SAAS,YAAY,EAAE,yBAAyB,YAAY;AACrF,aAAK,WAAY,YAAY,KAAK,kBAAkB,UAAU,IAAI,CAAC;AAEnE,aAAK,WAAW,KAAK,WAAY,cAAc,QAAQ;AACvD,aAAK,UAAU,KAAK,WAAY,cAAc,UAAU;AACxD,aAAK,UAAU,KAAK,WAAY,cAAc,UAAU;AACxD,aAAK,UAAU,KAAK,WAAY,cAAc,UAAU;AAExD,gBAAQ,IAAI;AAAA,UACR,eAAe,YAAY,iBAAiB;AAAA,QAChD,CAAC,EAAE,KAAK,MAAI;AACR,cAAI,UAAU,KAAK,QAAQ,WAAY,cAAc,sBAAsB;AAC3E,cAAI,UAAU,KAAK,QAAQ,WAAY,cAAc,sBAAsB;AAC3E,cAAI,UAAU,KAAK,QAAQ,WAAY,cAAc,sBAAsB;AAC3E,kBAAQ,MAAM,WAAW;AACzB,kBAAQ,MAAM,WAAW;AACzB,kBAAQ,MAAM,WAAW;AAAA,QAC7B,CAAC;AAED,aAAK,QAAQ,iBAAiB,UAAU,CAAC,UAAgB;AACrD,cAAI,MAAO,MAAM,OAA0B;AAC3C,eAAK,MAAM,CAAC,IAAI;AAChB,eAAK,cAAc,IAAI,MAAM,QAAQ,CAAC;AAAA,QAC1C,CAAC;AACD,aAAK,QAAQ,iBAAiB,UAAU,CAAC,UAAgB;AACrD,cAAI,MAAO,MAAM,OAA0B;AAC3C,eAAK,MAAM,CAAC,IAAI;AAChB,eAAK,cAAc,IAAI,MAAM,QAAQ,CAAC;AAAA,QAC1C,CAAC;AACD,aAAK,QAAQ,iBAAiB,UAAU,CAAC,UAAgB;AACrD,cAAI,MAAO,MAAM,OAA0B;AAC3C,eAAK,MAAM,CAAC,IAAI;AAChB,eAAK,cAAc,IAAI,MAAM,QAAQ,CAAC;AAAA,QAC1C,CAAC;AAAA,MAEL;AAAA,MAEA,oBACA;AACI,aAAK,QAAQ,iBAAiB,KAAK;AACnC,aAAK,QAAQ,iBAAiB,KAAK;AACnC,aAAK,QAAQ,iBAAiB,KAAK;AAAA,MAEvC;AAAA,MAEA,WAAW,qBACX;AACI,eAAO,CAAC,kBAAkB,OAAO;AAAA,MACrC;AAAA,MAEA,yBAAyB,MAAe,UAAgB,UACxD;AACI,gBAAO,MACP;AAAA,UACI,KAAK;AACD,iBAAK,iBAAiB,WAAW,QAAQ;AACzC,iBAAK,QAAQ,QAAQ,KAAK;AAC1B,iBAAK,QAAQ,QAAQ,KAAK;AAC1B,iBAAK,QAAQ,QAAQ,KAAK;AAC1B;AAAA,UACJ,KAAK;AACD,iBAAK,QAAQ;AACb,iBAAK,SAAS,YAAY;AAC1B;AAAA,UACJ;AACI;AAAA,QACR;AAAA,MACJ;AAAA,MAEA,IAAI,QAAkB;AAClB,eAAO,CAAC,KAAK,QAAQ,OAAO,KAAK,QAAQ,OAAO,KAAK,QAAQ,KAAK;AAAA,MACtE;AAAA,MAEA,IAAI,MAAM,KACV;AACI,gBAAQ,IAAI,qBAAqB,GAAG;AACpC,aAAK,QAAQ,QAAQ,IAAI,CAAC;AAC1B,aAAK,QAAQ,QAAQ,IAAI,CAAC;AAC1B,aAAK,QAAQ,QAAQ,IAAI,CAAC;AAC1B,aAAK,SAAS;AAAA,MAClB;AAAA,MAEA,IAAI,cAAc,KAClB;AACI,aAAK,iBAAiB;AACtB,aAAK,QAAQ,gBAAgB,IAAI,CAAC;AAClC,aAAK,QAAQ,gBAAgB,IAAI,CAAC;AAClC,aAAK,QAAQ,gBAAgB,IAAI,CAAC;AAAA,MACtC;AAAA,MAEA,IAAI,MAAM,KACV;AACI,aAAK,SAAS;AACd,aAAK,SAAS,YAAY;AAAA,MAC9B;AAAA,IAEJ;AAGA,mBAAe,OAAO,oBAAoB,cAAc;AAAA;AAAA;;;ACjKxD,IAAa;AAAb;AAAA;AAAA;AAAO,IAAM,WAAN,cAAuB,YAAW;AAAA,MACrC;AAAA,MACA;AAAA,MACA,cACA;AACI,cAAM;AACN,aAAK,aAAa,EAAC,MAAO,OAAM,CAAC;AACjC,ctB,cAAM,WAAW,OAAO;AAAA;AAAA,cAElB,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUZ,aAAK,oBAAoB,SAAS,YAAY,EAAE,yBAAyB,QAAQ;AACjF,aAAK,YAAY,YAAY,KAAK,kBAAkB,UAAU,IAAI,CAAC;AAEnE,YAAI,YAAY,KAAK,YAAY,cAAc,YAAY;AAC3D,YAAI,WAAW,KAAK,YAAY,cAAc,WAAW;AACzD,aAAK,aAAa,KAAK,YAAY,cAAc,UAAU;AAC3D,mBAAW,iBAAiB,SAAS,CAAC,UAAgB;AAClD,eAAK,WAAY,UAAU,IAAI,QAAQ;AAAA,QAC3C,CAAC;AACD,kBAAU,iBAAiB,SAAS,CAAC,UAAgB;AACjD,eAAK,WAAY,UAAU,OAAO,QAAQ;AAAA,QAC9C,CAAC;AAED,iBAAS,iBAAiB,YAAY,CAAC,UAAQ;AAC3C,cAAG,MAAM,QAAQ,KACjB;AACI,iBAAK,WAAY,UAAU,OAAO,QAAQ;AAAA,UAC9C;AAAA,QACJ,CAAC;AAAA,MAEL;AAAA,MAEA,oBAAmB;AAAA,MACnB;AAAA,MAEA,WAAW,qBAAoB;AAC3B,eAAO,CAAC,MAAM;AAAA,MAClB;AAAA,MAGA,yBAAyB,MAAe,UAAgB,UAAgB;AACpE,gBAAO,MAAK;AAAA,UACR,KAAK;AACD,iBAAK,WAAW,UAAU,IAAI,QAAQ;AACtC;AAAA,QACR;AAAA,MACJ;AAAA,IACJ;AAEA,mBAAe,OAAO,aAAa,QAAQ;AAAA;AAAA;;;ACrO3C,IAAa;AAAb;AAAA;AAAA;AAAO,IAAM,eAAN,cAA2B,YAAW;AAAA,MACzC;AAAA,MACA,cAAa;AACT,cAAM;AACN,aAAK,aAAa,EAAC,MAAO,OAAM,CAAC;AACjC,cAAM,SAAS,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAMtB,cAAM,WAAW,OAAO;AAAA,cAClB,MAAM;AAAA;AAAA;AAGZ,aAAK,oBAAoB,SAAS,YAAY,EAAE,yBAAyB,QAAQ;AACjF,aAAK,YAAY,YAAY,KAAK,kBAAkB,UAAU,IAAI,CAAC;AAAA,MACvE;AAAA,MAGA,oBAAmB;AAAA,MACnB;AAAA,MAGA,WAAW,qBAAoB;AAC3B,eAAO,CAAC;AAAA,MACZ;AAAA,MAGA,yBAAyB,MAAe,UAAgB,UAAgB;AAAA,MAExE;AAAA,IACJ;AACA,mBAAe,OAAO,iBAAiB,YAAY;AAAA;AAAA;;;ACjCnD,IAAa;AAAb;AAAA;AAAA;AAAO,IAAM,WAAN,cAAuB,YAAY;AAAA,MACxC,QAAgB;AAAA,MAEhB,cAAc;AACZ,cAAM;AACN,aAAK,aAAa,EAAE,MAAM,OAAO,CAAC;AAAA,MACpC;AAAA,MAEA,oBAAoB;AAClB,aAAK,OAAO;AAAA,MACd;AAAA,MAEA,SAAS;AACP,aAAK,WAAY,YAAY,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAStC;AAAA,IACF;AAGA,mBAAe,OAAO,aAAa,QAAQ;AAAA;AAAA;;;AC1B3C;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,WAAO,UAAU,CAAE,cAAc,aAAa,gBAAgB,gBAAgB,aAAa,UAAU,eAAe,eAAe,gBAAgB,UAAU,cAAc,QAAQ;AAAA;AAAA;",
  "names": ["checkbox"]
}
