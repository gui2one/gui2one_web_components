"use strict";export class GuiAccordion extends HTMLElement{constructor(){var e;super(),this.collapsibles=[],this.attachShadow({mode:"open"});const a=String.raw`<style>

        </style>`,t=String.raw`
            ${a}
            <slot></slot>
        `;this.template_fragment=document.createRange().createContextualFragment(t),(e=this.shadowRoot)===null||e===void 0||e.appendChild(this.template_fragment.cloneNode(!0))}open(e){this.collapsibles.forEach((a,t)=>{a!==e&&a.setAttribute("closed","true")})}connectedCallback(){const e=this.shadowRoot.querySelector("slot");this.collapsibles=[],e?.addEventListener("slotchange",()=>{for(let a of e?.assignedNodes())if(a.nodeName==="GUI-COLLAPSIBLE"){let t=a;t.addEventListener("open",l=>{this.open(l.target)}),this.collapsibles.push(t)}})}adoptedCallBack(){console.log("adopted")}static get observedAttributes(){return[]}attributeChangedCallback(e,a,t){}}customElements.define("gui-accordion",GuiAccordion);export class GuiCheckbox extends HTMLElement{constructor(){var e;super(),this._label="toggle",this.value=!0,this.attachShadow({mode:"open"});const a=String.raw`<style>
            :host{
                --padding-top : 0.3em;
                --padding-bottom : 0.3em;
                --padding-left : 0.5em;
                --padding-right : 0.5em;
            }
            #wrapper{
                display : flex;
                align-items : center;
                justify-content : center;
                margin-top : 0.5em;
                margin-bottom : 0.5em;
                padding-left : 0.5em;
                padding-right : 0.5em;

                /* padding-top : var(--padding-top); */
                /* padding-bottom : 0.1em; */
            }
            label{
                display : flex;
                flex : 1;
                align-items : center;
                /* justify-content : center; */
                color : white;
                background-color : grey;
                padding-left : var(--padding-left);
                padding-top : var(--padding-top);
                padding-bottom : var(--padding-bottom);

                border-radius : 3px 0 0 3px;
                line-height : 1em;
                width : 50%;
                cursor : pointer;
            }
            label.checked{
                background-color : green;
            }
            input[type=checkbox]
            {
                visibility : hidden;
                display : none;
            }
            .pretty{
                position : relative;
                flex : 1;
                height : 1em;
                width : 50px;
                background-color : white;
                padding-top : var(--padding-top);
                padding-bottom : var(--padding-bottom);

                border-radius : 0px 3px 3px 0px;
            }
            .pretty.checked::after{
                content : "";
                position : absolute;
                left : calc(50% - 30px/2);
                top : 0;
                width : 30px;
                height : 10px;
                /* background-color : red; */
                border-radius : 0px 3px 3px 0px;
                border : 10px solid #222;
                border-top : none;
                border-right : none;
                transform-origin : 50% 50%;
                transform : scale(0.6) rotate(-45deg) ;
            }
        </style>`,t=String.raw`
            ${a}

            <div id="wrapper">
            <label for="checkbox" class=" ${this.value?"checked":""}">${this._label}</label>
            <div class="pretty ${this.value?"checked":""}">
            </div>
            <input id="checkbox" type="checkbox" ${this.value?"checked":""} />
            </div>
        `;this.template_fragment=document.createRange().createContextualFragment(t),(e=this.shadowRoot)===null||e===void 0||e.appendChild(this.template_fragment.cloneNode(!0)),this.label_el=this.shadowRoot.querySelector("label"),this.pretty_el=this.shadowRoot.querySelector(".pretty"),this.shadowRoot.querySelector("#checkbox").addEventListener("change",s=>{let o=s.target;this.value=o.toggleAttribute("checked"),this.pretty_el.classList.toggle("checked"),this.label_el.classList.toggle("checked");let i=new Event("change");this.dispatchEvent(i)})}connectedCallback(){}static get observedAttributes(){return["label"]}set label(e){this.label_el&&(this.label_el.innerHTML=`<span>${e}</span>`)}attributeChangedCallback(e,a,t){switch(e){case"value":this.value=t;break;case"label":this.label=t;break;default:break}}}customElements.define("gui-checkbox",GuiCheckbox);export class GuiCollaspible extends HTMLElement{constructor(){var e;super(),this.closed=!0,this._title="collaspible",this.attachShadow({mode:"open"});const a=String.raw`
        <style>

            .header{
                display : flex;
                align-items : center;
                cursor : pointer;
                background-color : #222;
                margin : 0;
                height : 2em;
                margin-top : 0.25em;
                padding-left : 0.5em; 
                font-weight : bolder;
            }

            .header:hover{
                filter: brightness(1.2);
            }

            .header.closed{
                font-weight : normal;
            }
            .content{
                padding : 0.5em;
                padding-left : 0.5em;
                padding-right : 0.5em;
                overflow-y : hidden;
                /* height : auto; */
                opacity : 1;
                transform-origin : center top;
                transform : scale3d(1.0, 1.0, 1.0);
                transition : all .2s;
            }
            .content.closed{
                /* transform : scale3d(1.0, 0.0, 1.0); */
                height : 0;
                padding-top : 0;
                padding-bottom : 0;
                opacity : 0;
            }

            .arrow {
                width: 0; 
                height: 0; 
                border-top: 10px solid transparent;
                border-bottom: 10px solid transparent; 
                
                border-left:10px solid white; 
                /* padding-right : 10px; */
                transform-origin : 50% 50%;
                margin-right : 20px;
                transform : rotate(90deg);
                transition : all 0.08s; 
                opacity : 1.0;
            }
            
            .arrow.closed{
                transform : rotate(0deg);
                opacity : 0.5;
            }
            
        
        </style>`;this.closed=!0;const t=String.raw`
            
            ${a}

            <div class="wrapper">
                <div class="header"><div class="arrow" id="arrow"></div><span>${this.title}</span></div>
                <div class="content">
                    <slot></slot>
                </div>
            </div>
        `;this.template_fragment=document.createRange().createContextualFragment(t),(e=this.shadowRoot)===null||e===void 0||e.appendChild(this.template_fragment.cloneNode(!0)),this.header_el=this.shadowRoot.querySelector(".header"),this.arrow_el=this.shadowRoot.querySelector(".header>.arrow"),this.content_el=this.shadowRoot.querySelector(".content")}connectedCallback(){this.closed&&(this.header_el.setAttribute("closed","true"),this.content_el.setAttribute("closed","true"),this.arrow_el.classList.add("closed"),this.header_el.classList.add("closed"),this.content_el.classList.add("closed")),this.header_el.addEventListener("click",e=>{if(this.arrow_el.classList.toggle("closed"),this.header_el.classList.toggle("closed"),this.content_el.classList.toggle("closed"),this.header_el.classList.contains("closed"))this.closed=!0;else{this.closed=!1;let a=new Event("open");this.dispatchEvent(a)}})}static get observedAttributes(){return["title","closed"]}set title(e){this._title=e}attributeChangedCallback(e,a,t){var l;switch(e){case"title":this.title=t;let s=(l=this.shadowRoot)===null||l===void 0?void 0:l.querySelector(".header>span");s.innerText=t;break;case"closed":t===""?this.closed=!0:t==="true"?this.closed=!0:t==="false"&&(this.closed=!1),this.closed?(this.arrow_el.classList.add("closed"),this.header_el.classList.add("closed"),this.content_el.classList.add("closed")):(this.arrow_el.classList.remove("closed"),this.header_el.classList.remove("closed"),this.content_el.classList.remove("closed"));break;default:break}}}customElements.define("gui-collapsible",GuiCollaspible);class h extends HTMLElement{constructor(){super(),this._label="Label",this._value="",this._selectedIndex=0,this.attachShadow({mode:"open"});const e=String.raw`<style>
            .wrapper{
                padding : 0.5em;
                display : flex;
                flex-direction : row;
                align-items :center;
                justify-content : center;
                height : 30px;
            }

            label{
                display : flex;
                align-items : center;
                justify-content : center;
                position : relative;
                outline : 1px solid rgba(255,255,255,0.1);
                height : 100%;
                flex : 1.0;

                border-radius : 3px 0 0 3px;
            }

            select{
                border : 0;
                height : 31px;
                line-height : 30px;
                flex : 1;
                position : relative;
                display : block;
                color : #222;
                background-color : white;
                border-radius : 0 3px 3px 0;
            }
        </style>`,a=String.raw`
            ${e}

            <div class="wrapper">
            <label for="list">${this._label}</label>
            <slot></slot>

            </div>

            
        `;this.template_fragment=document.createRange().createContextualFragment(a),this.shadowRoot.appendChild(this.template_fragment.cloneNode(!0)),this.wrapper=this.shadowRoot.querySelector(".wrapper"),this.label_el=this.shadowRoot.querySelector("label")}set label(e){this.label_el&&(this._label=e,this.label_el.innerText=e)}set selectedIndex(e){this._selectedIndex=e}get selectedIndex(){return this._selectedIndex}get value(){return this._value}set value(e){this._value=e}connectedCallback(){var e;const a=(e=this.shadowRoot)===null||e===void 0?void 0:e.querySelector("slot");let t=[];a?.addEventListener("slotchange",()=>{for(let o of a?.assignedNodes())if(o.nodeName==="OPTION"){let i=o;t.push(i),this.removeChild(i)}let l=this.shadowRoot.querySelector(".wrapper>select");l!==null&&this.wrapper.removeChild(l);let s=document.createElement("select");s.id="list",s.addEventListener("change",o=>{let i=o.target;this.value=i.value,this.selectedIndex=i.selectedIndex;let n=new Event("change",{});this.dispatchEvent(n)});for(let o of t){let i=document.createElement("option");i.innerText=o.value,s.appendChild(i)}this.wrapper.appendChild(s)})}static get observedAttributes(){return["label"]}attributeChangedCallback(e,a,t){switch(e){case"label":this.label_el&&(this.label_el.innerText=t);default:break}}}customElements.define("gui-combobox",h);class p extends HTMLElement{constructor(){var e;super(),this._label="default label",this.attachShadow({mode:"open"});const a=String.raw`<style>

            .wrapper{
                position : relative;
                border-radius : 3px;
                outline : 2px solid #ffffff10;
                padding : 0.2em;
                padding-top : 0.5em;
                margin-top : 1.0em;
                /* height : min-content; */

            }
            .label{
                font-size : 0.8em;
                position : absolute;

                top : 0;
                line-height : 1em;
                background-color : #222222;
                margin-top : -0.5em;
            }
        </style>`,t=String.raw`
            ${a}


            <div class="wrapper">
            <div class="label">${this._label}</div>
            <slot></slot>

            </div>

        `;this.template_fragment=document.createRange().createContextualFragment(t),(e=this.shadowRoot)===null||e===void 0||e.appendChild(this.template_fragment.cloneNode(!0)),this.label_el=this.shadowRoot.querySelector(".label")}connectedCallback(){}static get observedAttributes(){return["label"]}set label(e){this.label_el&&(this._label=e,this.label_el.innerText=e)}attributeChangedCallback(e,a,t){switch(e){case"label":this.label=t;break;default:break}}}customElements.define("gui-group",p);export class GuiInputFloat extends HTMLElement{constructor(){var e;super(),this.value_preview=0,this.default_value=0,this._label="",this._color="",this.drag_start_pos=0,this.ctrl_pressed=!1,this.shift_pressed=!1,this.attachShadow({mode:"open"}),this._value=0,this.label="X",this.color="hotpink",this.is_mouse_down=!1,this.is_dragging=!1,this._label="wtf ?",this.styles=String.raw`
            <style>

            :host{
                --padding-top : 0.3em;
                --padding-bottom : 0.3em;
                --padding-left : 0.15em;
                --padding-right : 0.15em;
            }

            .wrapper{
                position : relative;
                display : flex;
                align-items: stretch;
                width : max-content;
                font-size : 0.9rem;
            }

            .label{
                color : white;
                position : relative;
                padding-left : 0.5em;
                padding-right : 0.5em;
                background-color : ${this._color};
                border-radius : 2px 0 0 2px;
                vertical-align : middle;
                padding-top : var(--padding-top);
                padding-bottom : var(--padding-bottom);
                user-select : none;

                cursor : e-resize;   
            }

            .label span{
                opacity : 0.8;                
            }

            .value_div{
                padding-left : 0.2em;
                position : relative;
                overflow : hidden;
                border-radius : 0 2px 2px 0;
                background-color : #eee;
                padding-top : var(--padding-top);
                padding-bottom : var(--padding-bottom);
                padding-left : var(--padding-left);
                
            }

            input{
                color : #222;
                font-weight : bold;
                height : calc(100% - 2px );
                width : 8ch;
                border : none;
                height: max-content;
                background-color : transparent;
            }

            </style>        
        `;const a=String.raw`

            ${this.styles}

            <div class="wrapper" oncontextmenu="return false;">
                <div class="label"><span>${this._label}<span></div>
                <div class="value_div">
                    <input type=number step="0.1" value=${this.value} />
                </div>
            <div>
        `;this.template_fragment=document.createRange().createContextualFragment(a),(e=this.shadowRoot)===null||e===void 0||e.appendChild(this.template_fragment.cloneNode(!0)),this.label_el=this.shadowRoot.querySelector(".label");let t=this.label_el.querySelector("span");this.value_input=this.shadowRoot.querySelector("input")}connectedCallback(){document.addEventListener("keydown",e=>{e.ctrlKey&&(this.ctrl_pressed=!0),e.shiftKey&&(this.shift_pressed=!0)}),document.addEventListener("keyup",e=>{e.key=="Control"&&(this.ctrl_pressed=!1),e.key=="Shift"&&(this.shift_pressed=!1)}),this.value_input.addEventListener("input",e=>{this._value=parseFloat(this.value_input.value)}),this.value_input.addEventListener("keypress",e=>{e.key==="Enter"&&(this.value_input.blur(),this.triggerChange())}),this.value_input.addEventListener("blur",e=>{this.triggerChange()}),this.label_el.addEventListener("mousedown",e=>{e.button===0?(this.is_mouse_down=!0,this.drag_start_pos=e.clientX):e.button===2&&(this.value_input.value=this.default_value.toString(),this.value=this.default_value)}),document.addEventListener("mouseup",e=>{this.is_mouse_down=!1,e.button===0&&this.value_preview!==0&&(this.value=this.value_preview,this.value_preview=0)}),document.addEventListener("mousemove",e=>{if(this.is_mouse_down){let a=e.pageX-this.drag_start_pos,t=.1;this.ctrl_pressed?t*=.1:this.shift_pressed&&(t*=5),a*=t,this.value_input.value=(this.value+a).toString(),this.value_preview=this.value+a}})}static get observedAttributes(){return["label","color","default_value"]}triggerChange(){let e=new Event("change",{});this.dispatchEvent(e)}set value(e){this._value=e,this.value_input.value=e.toString(),this.triggerChange()}get value(){return this._value}set color(e){this._color=e}set label(e){this._label=e,this.label_el&&(this.label_el.innerHTML=`<span>${e}</span>`)}attributeChangedCallback(e,a,t){switch(e){case"color":this.label_el.style.backgroundColor=t;break;case"label":this.label=t;break;case"default_value":this.default_value=parseFloat(t),this.value=this.default_value;break;default:break}}handleEvent(e){console.log("Event on Custom Float Component")}}customElements.define("gui-input-float",GuiInputFloat);export class GuiInputVector extends HTMLElement{constructor(){super(),this.default_scalar=0,this.label="Vector",this._value=[0,0,0],this._default_value=[0,0,0],this.attachShadow({mode:"open"});const e=String.raw`
            <style>

                .wrapper{
                    margin-top : 3px;
                    font-size : 0.9em;
                }

                .label{
                    font-family : sans-serif;
                }
            </style>
        `,a=String.raw`

            ${e}
            <div class="wrapper">
                <div class="label">${this.label}</div>
                <div class="floats" style="display : flex; gap:5px;">
                    <gui-input-float id="input_x" color="red"   label="x" default_value="${this.default_scalar}"> </gui-input-float>
                    <gui-input-float id="input_y" color="green" label="y" default_value="${this.default_scalar}"></gui-input-float>
                    <gui-input-float id="input_z" color="blue"  label="z" default_value="${this.default_scalar}"></gui-input-float>
                </div>
            </div>
        `;this.template_fragment=document.createRange().createContextualFragment(a),this.shadowRoot.appendChild(this.template_fragment.cloneNode(!0)),this.label_el=this.shadowRoot.querySelector(".label"),this.input_x=this.shadowRoot.querySelector("#input_x"),this.input_y=this.shadowRoot.querySelector("#input_y"),this.input_z=this.shadowRoot.querySelector("#input_z"),this.input_x.addEventListener("change",t=>{let l=t.target.value;this.value[0]=l,this.dispatchEvent(new Event("change"))}),this.input_y.addEventListener("change",t=>{let l=t.target.value;this.value[1]=l,this.dispatchEvent(new Event("change"))}),this.input_z.addEventListener("change",t=>{let l=t.target.value;this.value[2]=l,this.dispatchEvent(new Event("change"))})}connectedCallback(){this.input_x.default_value=this.default_scalar,this.input_y.default_value=this.default_scalar,this.input_z.default_value=this.default_scalar}static get observedAttributes(){return["default_scalar","label"]}attributeChangedCallback(e,a,t){switch(e){case"default_scalar":this.default_scalar=parseFloat(t),this.input_x.value=this.default_scalar,this.input_y.value=this.default_scalar,this.input_z.value=this.default_scalar;break;case"label":this.label=t,this.label_el.innerText=t;break;default:break}}get value(){return[this.input_x.value,this.input_y.value,this.input_z.value]}set value(e){this._value=e}}customElements.define("gui-input-vector",GuiInputVector);export class GuiPanel extends HTMLElement{constructor(){var e,a,t,l;super(),this.attachShadow({mode:"open"});const s=String.raw`
            <style>
                .panel{
                    --scrollbar-width : 8px;
                    --scrollbar-track-color : transparent;
                    --scrollbar-thumb-color : gray;

                    
                }
                
                        /* For WebKit browsers (Chrome, Safari) */
                        ::-webkit-scrollbar {
                            width: var(--scrollbar-width);
                        }

                        ::-webkit-scrollbar-thumb {
                            background-color: var(--scrollbar-thumb-color);
                            border-radius: 6px;
                        }

                        ::-webkit-scrollbar-track {
                            background-color: var(--scrollbar-track-color);
                        }

                        /* For Firefox */
                        * {
                            scrollbar-color: var(--scrollbar-thumb-color) var(--scrollbar-track-color);
                        }

                        *::-webkit-scrollbar {
                            width: var(--scrollbar-width);
                        }

                        *::-webkit-scrollbar-thumb {
                            background-color: var(--scrollbar-thumb-color);
                            border-radius: 6px;
                        }

                        *::-webkit-scrollbar-track {
                            background-color: var(--scrollbar-track-color);
                        }                
                #wrapper{
                    position : fixed;
                    top : 0px;
                    right : 0px;
                    padding : 0.5em;
                    padding-bottom : 0;
                    padding-top : 0;

                    box-shadow : -2px 2px 8px #0001;
                    border-radius : 0 0 0 3px;
                    height : 100%;
                    max-height : 100%;
                    color : white;
                    background-color : #111;

                    transition : transform;
                    transition-duration : 0.1s;

                    cursor: default;
                    user-select : none;
                }

                #wrapper.hidden{
                    transform : translate3d(100%,0,0 );
                }

                .panel{
                    position : relative;
                    overflow-y : scroll;
                    height : calc(100% - 50px - 2em);
                    width : 100%;
                    padding-top : 2em;
                }
                .panel:after{
                    content : " ";
                    position : absolute;
                    width : 100%;
                    height : 30px;
                }

                .close_btn{
                    position : relative;
                    top : 0;
                    cursor : pointer;
                    height : calc(50px);
                    margin-top : 2px;
                    margin-left : 0px;
                    opacity : 0.5;
                    /* outline : 1px solid white; */
                    width : 100%;
                }

                .close_btn:hover{
                    opacity : 1.0;
                }

                .close_btn::before{
                    content : '';
                    position : absolute;
                    top : 0; 
                    left : 0;
                    width : 4px;
                    height : 100%;
                    border-radius : 5px;
                    background-color : #eee;
                    transform-origin : 50% 50%;
                    transform :  translateX(20px) rotate(45deg);
                }
                .close_btn::after{
                    content : '';
                    position : absolute;
                    top : 0; 
                    left : 0;
                    width : 4px;
                    height : 100%;
                    border-radius : 5px;
                    background-color : #eee;
                    transform-origin : 50% 50%;
                    transform : translateX(20px) rotate(-45deg);
                }

                .open_btn{
                    display : flex;
                    align-items : center;
                    justify-content : center;
                    font-weight : bold;
                    font-size : 2em;
                    position : absolute;
                    width : 25px;
                    height : 25px;
                    background-color : transparent; 
                    opacity : 0.5;
                    filter : drop-shadow(2px 2px 2px pink);
                    top : 0;
                    left : 0;  
                    z-index : 2;
                    margin-left : -25px;
                    visibility : hidden;
                }
                .open_btn:hover{
                    opacity : 0.9;
                }
                #wrapper.hidden>.open_btn{
                    visibility : visible;
                }
            </style>
        `,o=String.raw`
            
            ${s}
            <!-- <div id="wrapper" oncontextmenu="return false;"> -->
            <div id="wrapper" >
                <div class="open_btn">&lt;</div>
                <div class="close_btn"></div>
                <div class="panel">
                    <slot></slot>
                </div>
            </div>
        `;this.template_fragment=document.createRange().createContextualFragment(o),(e=this.shadowRoot)===null||e===void 0||e.appendChild(this.template_fragment.cloneNode(!0));let i=(a=this.shadowRoot)===null||a===void 0?void 0:a.querySelector(".close_btn"),n=(t=this.shadowRoot)===null||t===void 0?void 0:t.querySelector(".open_btn"),d=(l=this.shadowRoot)===null||l===void 0?void 0:l.querySelector("#wrapper");i?.addEventListener("click",c=>{d.classList.add("hidden")}),n?.addEventListener("click",c=>{d.classList.remove("hidden")}),document.addEventListener("keypress",c=>{c.key==="h"&&d.classList.toggle("hidden")})}}customElements.define("gui-panel",GuiPanel);class u extends HTMLElement{constructor(){var e;super(),this.attachShadow({mode:"open"});const a=String.raw`<style>

            hr{
                opacity : 0.1;
            }
        </style>`,t=String.raw`
            ${a}
            <hr>
        `;this.template_fragment=document.createRange().createContextualFragment(t),(e=this.shadowRoot)===null||e===void 0||e.appendChild(this.template_fragment.cloneNode(!0))}connectedCallback(){}static get observedAttributes(){return[]}attributeChangedCallback(e,a,t){}}customElements.define("gui-separator",u);export class GuiTitle extends HTMLElement{constructor(){super(),this.title="Hello, World!",this.attachShadow({mode:"open"})}connectedCallback(){this.render()}render(){this.shadowRoot.innerHTML=String.raw`
      <style>
        :host {
          display: block;
        }

      </style>
      <h2><slot></slot></h2>
    `}}customElements.define("gui-title",GuiTitle);
